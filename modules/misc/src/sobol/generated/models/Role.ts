/* eslint-disable */
/**
 * Sobol API Docs
 * An OpenAPI Implementation exposing Sobol\'s RESTful API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@sobol.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime.js';
import type { RoleAccountableTo } from './RoleAccountableTo.js';
import { RoleAccountableToFromJSON, RoleAccountableToToJSON } from './RoleAccountableTo.js';
import type { RoleAssignmentsInner } from './RoleAssignmentsInner.js';
import { RoleAssignmentsInnerFromJSON, RoleAssignmentsInnerToJSON } from './RoleAssignmentsInner.js';
import type { RoleContributesTo } from './RoleContributesTo.js';
import { RoleContributesToFromJSON, RoleContributesToToJSON } from './RoleContributesTo.js';

/**
 *
 * @export
 * @interface Role
 */
export interface Role {
  /**
   *
   * @type {string}
   * @memberof Role
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  _type?: RoleTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  _rootId: string;
  /**
   *
   * @type {Date}
   * @memberof Role
   */
  _createdOn?: Date;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  _createdBy: string;
  /**
   *
   * @type {Date}
   * @memberof Role
   */
  _updatedOn?: Date;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  _updatedBy?: string;
  /**
   *
   * @type {Date}
   * @memberof Role
   */
  _archivedOn?: Date;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  _archivedBy?: string;
  /**
   *
   * @type {Date}
   * @memberof Role
   */
  _deletedOn?: Date;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  _deletedBy?: string;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  _operationId?: string;
  /**
   *
   * @type {boolean}
   * @memberof Role
   */
  _isPublic?: boolean;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  templateId?: string;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  status?: RoleStatusEnum;
  /**
   *
   * @type {number}
   * @memberof Role
   */
  userAllocationPercent?: number;
  /**
   *
   * @type {RoleContributesTo}
   * @memberof Role
   */
  contributesTo: RoleContributesTo;
  /**
   *
   * @type {Array<RoleAssignmentsInner>}
   * @memberof Role
   */
  assignments?: Array<RoleAssignmentsInner>;
  /**
   *
   * @type {RoleAccountableTo}
   * @memberof Role
   */
  accountableTo?: RoleAccountableTo;
  /**
   *
   * @type {Array<RoleAccountableTo>}
   * @memberof Role
   */
  accountableFor?: Array<RoleAccountableTo>;
}

/**
 * @export
 * @enum {string}
 */
export enum RoleTypeEnum {
  role = 'role',
}
/**
 * @export
 * @enum {string}
 */
export enum RoleStatusEnum {
  draft = 'draft',
  active = 'active',
  archived = 'archived',
}

/**
 * Check if a given object implements the Role interface.
 */
export function instanceOfRole(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && '_id' in value;
  isInstance = isInstance && '_rootId' in value;
  isInstance = isInstance && '_createdBy' in value;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'contributesTo' in value;

  return isInstance;
}

export function RoleFromJSON(json: any): Role {
  return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    _id: json['_id'],
    _type: !exists(json, '_type') ? undefined : json['_type'],
    _rootId: json['_rootId'],
    _createdOn: !exists(json, '_createdOn') ? undefined : new Date(json['_createdOn']),
    _createdBy: json['_createdBy'],
    _updatedOn: !exists(json, '_updatedOn') ? undefined : new Date(json['_updatedOn']),
    _updatedBy: !exists(json, '_updatedBy') ? undefined : json['_updatedBy'],
    _archivedOn: !exists(json, '_archivedOn') ? undefined : new Date(json['_archivedOn']),
    _archivedBy: !exists(json, '_archivedBy') ? undefined : json['_archivedBy'],
    _deletedOn: !exists(json, '_deletedOn') ? undefined : new Date(json['_deletedOn']),
    _deletedBy: !exists(json, '_deletedBy') ? undefined : json['_deletedBy'],
    _operationId: !exists(json, '_operationId') ? undefined : json['_operationId'],
    _isPublic: !exists(json, '_isPublic') ? undefined : json['_isPublic'],
    name: json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    templateId: !exists(json, 'templateId') ? undefined : json['templateId'],
    status: !exists(json, 'status') ? undefined : json['status'],
    userAllocationPercent: !exists(json, 'userAllocationPercent') ? undefined : json['userAllocationPercent'],
    contributesTo: RoleContributesToFromJSON(json['contributesTo']),
    assignments: !exists(json, 'assignments') ? undefined : (json['assignments'] as Array<any>).map(RoleAssignmentsInnerFromJSON),
    accountableTo: !exists(json, 'accountableTo') ? undefined : RoleAccountableToFromJSON(json['accountableTo']),
    accountableFor: !exists(json, 'accountableFor') ? undefined : (json['accountableFor'] as Array<any>).map(RoleAccountableToFromJSON),
  };
}

export function RoleToJSON(value?: Role | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    _id: value._id,
    _type: value._type,
    _rootId: value._rootId,
    _createdOn: value._createdOn === undefined ? undefined : value._createdOn.toISOString(),
    _createdBy: value._createdBy,
    _updatedOn: value._updatedOn === undefined ? undefined : value._updatedOn.toISOString(),
    _updatedBy: value._updatedBy,
    _archivedOn: value._archivedOn === undefined ? undefined : value._archivedOn.toISOString(),
    _archivedBy: value._archivedBy,
    _deletedOn: value._deletedOn === undefined ? undefined : value._deletedOn.toISOString(),
    _deletedBy: value._deletedBy,
    _operationId: value._operationId,
    _isPublic: value._isPublic,
    name: value.name,
    description: value.description,
    templateId: value.templateId,
    status: value.status,
    userAllocationPercent: value.userAllocationPercent,
    contributesTo: RoleContributesToToJSON(value.contributesTo),
    assignments: value.assignments === undefined ? undefined : (value.assignments as Array<any>).map(RoleAssignmentsInnerToJSON),
    accountableTo: RoleAccountableToToJSON(value.accountableTo),
    accountableFor: value.accountableFor === undefined ? undefined : (value.accountableFor as Array<any>).map(RoleAccountableToToJSON),
  };
}
