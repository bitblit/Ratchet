/* eslint-disable */
/**
 * Sobol API Docs
 * An OpenAPI Implementation exposing Sobol\'s RESTful API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@sobol.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
import type { AgreementOwnersInner } from './AgreementOwnersInner.js';
import {
    AgreementOwnersInnerFromJSON,
    AgreementOwnersInnerFromJSONTyped,
    AgreementOwnersInnerToJSON,
} from './AgreementOwnersInner.js';
import type { AgreementSignatoriesInner } from './AgreementSignatoriesInner.js';
import {
    AgreementSignatoriesInnerFromJSON,
    AgreementSignatoriesInnerFromJSONTyped,
    AgreementSignatoriesInnerToJSON,
} from './AgreementSignatoriesInner.js';

/**
 * 
 * @export
 * @interface Agreement
 */
export interface Agreement {
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _id: string;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _type?: AgreementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _rootId: string;
    /**
     * 
     * @type {Date}
     * @memberof Agreement
     */
    _createdOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _createdBy: string;
    /**
     * 
     * @type {Date}
     * @memberof Agreement
     */
    _updatedOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _updatedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Agreement
     */
    _archivedOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _archivedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Agreement
     */
    _deletedOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _deletedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _operationId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Agreement
     */
    _isPublic?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof Agreement
     */
    activatedOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _activatedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _deactivatedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Agreement
     */
    _deactivatedOn?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Agreement
     */
    _completedOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    _completedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    templateId?: string;
    /**
     * 
     * @type {string}
     * @memberof Agreement
     */
    status?: AgreementStatusEnum;
    /**
     * 
     * @type {Array<AgreementOwnersInner>}
     * @memberof Agreement
     */
    owners: Array<AgreementOwnersInner>;
    /**
     * 
     * @type {Array<AgreementSignatoriesInner>}
     * @memberof Agreement
     */
    signatories?: Array<AgreementSignatoriesInner>;
}

/**
* @export
* @enum {string}
*/
export enum AgreementTypeEnum {
    agreement = 'agreement'
}
/**
* @export
* @enum {string}
*/
export enum AgreementStatusEnum {
    draft = 'draft',
    active = 'active',
    done = 'done',
    archived = 'archived'
}


/**
 * Check if a given object implements the Agreement interface.
 */
export function instanceOfAgreement(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "_id" in value;
    isInstance = isInstance && "_rootId" in value;
    isInstance = isInstance && "_createdBy" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "owners" in value;

    return isInstance;
}

export function AgreementFromJSON(json: any): Agreement {
    return AgreementFromJSONTyped(json, false);
}

export function AgreementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Agreement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '_id': json['_id'],
        '_type': !exists(json, '_type') ? undefined : json['_type'],
        '_rootId': json['_rootId'],
        '_createdOn': !exists(json, '_createdOn') ? undefined : (new Date(json['_createdOn'])),
        '_createdBy': json['_createdBy'],
        '_updatedOn': !exists(json, '_updatedOn') ? undefined : (new Date(json['_updatedOn'])),
        '_updatedBy': !exists(json, '_updatedBy') ? undefined : json['_updatedBy'],
        '_archivedOn': !exists(json, '_archivedOn') ? undefined : (new Date(json['_archivedOn'])),
        '_archivedBy': !exists(json, '_archivedBy') ? undefined : json['_archivedBy'],
        '_deletedOn': !exists(json, '_deletedOn') ? undefined : (new Date(json['_deletedOn'])),
        '_deletedBy': !exists(json, '_deletedBy') ? undefined : json['_deletedBy'],
        '_operationId': !exists(json, '_operationId') ? undefined : json['_operationId'],
        '_isPublic': !exists(json, '_isPublic') ? undefined : json['_isPublic'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'activatedOn': !exists(json, 'activatedOn') ? undefined : (new Date(json['activatedOn'])),
        '_activatedBy': !exists(json, '_activatedBy') ? undefined : json['_activatedBy'],
        '_deactivatedBy': !exists(json, '_deactivatedBy') ? undefined : json['_deactivatedBy'],
        '_deactivatedOn': !exists(json, '_deactivatedOn') ? undefined : (new Date(json['_deactivatedOn'])),
        '_completedOn': !exists(json, '_completedOn') ? undefined : (new Date(json['_completedOn'])),
        '_completedBy': !exists(json, '_completedBy') ? undefined : json['_completedBy'],
        'templateId': !exists(json, 'templateId') ? undefined : json['templateId'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'owners': ((json['owners'] as Array<any>).map(AgreementOwnersInnerFromJSON)),
        'signatories': !exists(json, 'signatories') ? undefined : ((json['signatories'] as Array<any>).map(AgreementSignatoriesInnerFromJSON)),
    };
}

export function AgreementToJSON(value?: Agreement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_id': value._id,
        '_type': value._type,
        '_rootId': value._rootId,
        '_createdOn': value._createdOn === undefined ? undefined : (value._createdOn.toISOString()),
        '_createdBy': value._createdBy,
        '_updatedOn': value._updatedOn === undefined ? undefined : (value._updatedOn.toISOString()),
        '_updatedBy': value._updatedBy,
        '_archivedOn': value._archivedOn === undefined ? undefined : (value._archivedOn.toISOString()),
        '_archivedBy': value._archivedBy,
        '_deletedOn': value._deletedOn === undefined ? undefined : (value._deletedOn.toISOString()),
        '_deletedBy': value._deletedBy,
        '_operationId': value._operationId,
        '_isPublic': value._isPublic,
        'name': value.name,
        'description': value.description,
        'activatedOn': value.activatedOn === undefined ? undefined : (value.activatedOn.toISOString()),
        '_activatedBy': value._activatedBy,
        '_deactivatedBy': value._deactivatedBy,
        '_deactivatedOn': value._deactivatedOn === undefined ? undefined : (value._deactivatedOn.toISOString()),
        '_completedOn': value._completedOn === undefined ? undefined : (value._completedOn.toISOString()),
        '_completedBy': value._completedBy,
        'templateId': value.templateId,
        'status': value.status,
        'owners': ((value.owners as Array<any>).map(AgreementOwnersInnerToJSON)),
        'signatories': value.signatories === undefined ? undefined : ((value.signatories as Array<any>).map(AgreementSignatoriesInnerToJSON)),
    };
}

