/* tslint:disable */
/* eslint-disable */
/**
 * Sobol API Docs
 * An OpenAPI Implementation exposing Sobol\'s RESTful API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@sobol.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
import type { GoalOwnersInner } from './GoalOwnersInner.js';
import {
    GoalOwnersInnerFromJSON,
    GoalOwnersInnerFromJSONTyped,
    GoalOwnersInnerToJSON,
} from './GoalOwnersInner.js';
import type { GoalParentGoal } from './GoalParentGoal.js';
import {
    GoalParentGoalFromJSON,
    GoalParentGoalFromJSONTyped,
    GoalParentGoalToJSON,
} from './GoalParentGoal.js';

/**
 * 
 * @export
 * @interface Goal
 */
export interface Goal {
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    _id: string;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    _type?: GoalTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    _rootId: string;
    /**
     * 
     * @type {Date}
     * @memberof Goal
     */
    _createdOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    _createdBy: string;
    /**
     * 
     * @type {Date}
     * @memberof Goal
     */
    _updatedOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    _updatedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Goal
     */
    _archivedOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    _archivedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Goal
     */
    _deletedOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    _deletedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    _operationId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Goal
     */
    _isPublic?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Goal
     */
    startValue?: number;
    /**
     * 
     * @type {number}
     * @memberof Goal
     */
    targetValue?: number;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    valueType?: string;
    /**
     * 
     * @type {number}
     * @memberof Goal
     */
    currentValue?: number;
    /**
     * 
     * @type {Date}
     * @memberof Goal
     */
    currentValueChangedOn?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Goal
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Goal
     */
    endDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Goal
     */
    _completionDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    goalType?: GoalGoalTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    templateId?: string;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    status?: GoalStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Goal
     */
    order?: number;
    /**
     * 
     * @type {Array<GoalOwnersInner>}
     * @memberof Goal
     */
    owners?: Array<GoalOwnersInner>;
    /**
     * 
     * @type {GoalParentGoal}
     * @memberof Goal
     */
    parentGoal?: GoalParentGoal;
}

/**
* @export
* @enum {string}
*/
export enum GoalTypeEnum {
    goal = 'goal'
}
/**
* @export
* @enum {string}
*/
export enum GoalGoalTypeEnum {
    target = 'target',
    binary = 'binary',
    gauge = 'gauge',
    calculated = 'calculated'
}
/**
* @export
* @enum {string}
*/
export enum GoalStatusEnum {
    draft = 'draft',
    active = 'active',
    done = 'done',
    archived = 'archived'
}


/**
 * Check if a given object implements the Goal interface.
 */
export function instanceOfGoal(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "_id" in value;
    isInstance = isInstance && "_rootId" in value;
    isInstance = isInstance && "_createdBy" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function GoalFromJSON(json: any): Goal {
    return GoalFromJSONTyped(json, false);
}

export function GoalFromJSONTyped(json: any, ignoreDiscriminator: boolean): Goal {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '_id': json['_id'],
        '_type': !exists(json, '_type') ? undefined : json['_type'],
        '_rootId': json['_rootId'],
        '_createdOn': !exists(json, '_createdOn') ? undefined : (new Date(json['_createdOn'])),
        '_createdBy': json['_createdBy'],
        '_updatedOn': !exists(json, '_updatedOn') ? undefined : (new Date(json['_updatedOn'])),
        '_updatedBy': !exists(json, '_updatedBy') ? undefined : json['_updatedBy'],
        '_archivedOn': !exists(json, '_archivedOn') ? undefined : (new Date(json['_archivedOn'])),
        '_archivedBy': !exists(json, '_archivedBy') ? undefined : json['_archivedBy'],
        '_deletedOn': !exists(json, '_deletedOn') ? undefined : (new Date(json['_deletedOn'])),
        '_deletedBy': !exists(json, '_deletedBy') ? undefined : json['_deletedBy'],
        '_operationId': !exists(json, '_operationId') ? undefined : json['_operationId'],
        '_isPublic': !exists(json, '_isPublic') ? undefined : json['_isPublic'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'startValue': !exists(json, 'startValue') ? undefined : json['startValue'],
        'targetValue': !exists(json, 'targetValue') ? undefined : json['targetValue'],
        'valueType': !exists(json, 'valueType') ? undefined : json['valueType'],
        'currentValue': !exists(json, 'currentValue') ? undefined : json['currentValue'],
        'currentValueChangedOn': !exists(json, 'currentValueChangedOn') ? undefined : (new Date(json['currentValueChangedOn'])),
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        '_completionDate': !exists(json, '_completionDate') ? undefined : (new Date(json['_completionDate'])),
        'goalType': !exists(json, 'goalType') ? undefined : json['goalType'],
        'templateId': !exists(json, 'templateId') ? undefined : json['templateId'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'order': !exists(json, 'order') ? undefined : json['order'],
        'owners': !exists(json, 'owners') ? undefined : ((json['owners'] as Array<any>).map(GoalOwnersInnerFromJSON)),
        'parentGoal': !exists(json, 'parentGoal') ? undefined : GoalParentGoalFromJSON(json['parentGoal']),
    };
}

export function GoalToJSON(value?: Goal | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_id': value._id,
        '_type': value._type,
        '_rootId': value._rootId,
        '_createdOn': value._createdOn === undefined ? undefined : (value._createdOn.toISOString()),
        '_createdBy': value._createdBy,
        '_updatedOn': value._updatedOn === undefined ? undefined : (value._updatedOn.toISOString()),
        '_updatedBy': value._updatedBy,
        '_archivedOn': value._archivedOn === undefined ? undefined : (value._archivedOn.toISOString()),
        '_archivedBy': value._archivedBy,
        '_deletedOn': value._deletedOn === undefined ? undefined : (value._deletedOn.toISOString()),
        '_deletedBy': value._deletedBy,
        '_operationId': value._operationId,
        '_isPublic': value._isPublic,
        'name': value.name,
        'description': value.description,
        'startValue': value.startValue,
        'targetValue': value.targetValue,
        'valueType': value.valueType,
        'currentValue': value.currentValue,
        'currentValueChangedOn': value.currentValueChangedOn === undefined ? undefined : (value.currentValueChangedOn.toISOString()),
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString()),
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString()),
        '_completionDate': value._completionDate === undefined ? undefined : (value._completionDate.toISOString()),
        'goalType': value.goalType,
        'templateId': value.templateId,
        'status': value.status,
        'order': value.order,
        'owners': value.owners === undefined ? undefined : ((value.owners as Array<any>).map(GoalOwnersInnerToJSON)),
        'parentGoal': GoalParentGoalToJSON(value.parentGoal),
    };
}

