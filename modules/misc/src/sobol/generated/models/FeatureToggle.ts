/* eslint-disable */
/**
 * Sobol API Docs
 * An OpenAPI Implementation exposing Sobol\'s RESTful API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@sobol.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface FeatureToggle
 */
export interface FeatureToggle {
    /**
     * 
     * @type {string}
     * @memberof FeatureToggle
     */
    _id: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureToggle
     */
    _type: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureToggle
     */
    _rootId: string;
    /**
     * 
     * @type {Date}
     * @memberof FeatureToggle
     */
    _createdOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof FeatureToggle
     */
    featureType?: FeatureToggleFeatureTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof FeatureToggle
     */
    enabled: boolean;
    /**
     * 
     * @type {object}
     * @memberof FeatureToggle
     */
    modifiers?: object;
}

/**
* @export
* @enum {string}
*/
export enum FeatureToggleFeatureTypeEnum {
    goals = 'goals',
    agreements = 'agreements'
}


/**
 * Check if a given object implements the FeatureToggle interface.
 */
export function instanceOfFeatureToggle(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "_id" in value;
    isInstance = isInstance && "_type" in value;
    isInstance = isInstance && "_rootId" in value;
    isInstance = isInstance && "enabled" in value;

    return isInstance;
}

export function FeatureToggleFromJSON(json: any): FeatureToggle {
    return FeatureToggleFromJSONTyped(json, false);
}

export function FeatureToggleFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureToggle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '_id': json['_id'],
        '_type': json['_type'],
        '_rootId': json['_rootId'],
        '_createdOn': !exists(json, '_createdOn') ? undefined : (new Date(json['_createdOn'])),
        'featureType': !exists(json, 'featureType') ? undefined : json['featureType'],
        'enabled': json['enabled'],
        'modifiers': !exists(json, 'modifiers') ? undefined : json['modifiers'],
    };
}

export function FeatureToggleToJSON(value?: FeatureToggle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_id': value._id,
        '_type': value._type,
        '_rootId': value._rootId,
        '_createdOn': value._createdOn === undefined ? undefined : (value._createdOn.toISOString()),
        'featureType': value.featureType,
        'enabled': value.enabled,
        'modifiers': value.modifiers,
    };
}

