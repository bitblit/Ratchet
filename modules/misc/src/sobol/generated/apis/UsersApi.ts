/* eslint-disable */
/**
 * Sobol API Docs
 * An OpenAPI Implementation exposing Sobol\'s RESTful API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@sobol.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  LocalIdentity,
  User,
} from '../models/index.js';
import {
    LocalIdentityFromJSON,
    LocalIdentityToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index.js';

export interface OrgOrgIdUsersGetRequest {
    orgId: string;
}

export interface OrgOrgIdUsersInvitePostRequest {
    orgId: string;
    requestBody: Array<string>;
}

export interface OrgOrgIdUsersPostRequest {
    orgId: string;
    user: User;
}

export interface OrgOrgIdUsersUserIdDeleteRequest {
    orgId: string;
    userId: string;
}

export interface OrgOrgIdUsersUserIdGetRequest {
    orgId: string;
    userId: string;
}

export interface OrgOrgIdUsersUserIdIdentitiesSetRequiredPutRequest {
    orgId: string;
    userId: string;
    localIdentity: LocalIdentity;
}

export interface OrgOrgIdUsersUserIdPutRequest {
    orgId: string;
    userId: string;
    user: User;
}

/**
 * UsersApi - interface
 * 
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     * 
     * @summary Get all users
     * @param {string} orgId ID of the organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    orgOrgIdUsersGetRaw(requestParameters: OrgOrgIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>>;

    /**
     * Get all users
     */
    orgOrgIdUsersGet(requestParameters: OrgOrgIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>>;

    /**
     * 
     * @summary Invite a user
     * @param {string} orgId ID of the organization
     * @param {Array<string>} requestBody A list of user ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    orgOrgIdUsersInvitePostRaw(requestParameters: OrgOrgIdUsersInvitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Invite a user
     */
    orgOrgIdUsersInvitePost(requestParameters: OrgOrgIdUsersInvitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a user
     * @param {string} orgId ID of the organization
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    orgOrgIdUsersPostRaw(requestParameters: OrgOrgIdUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     * Create a user
     */
    orgOrgIdUsersPost(requestParameters: OrgOrgIdUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * 
     * @summary Delete a user
     * @param {string} orgId ID of the organization
     * @param {string} userId ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    orgOrgIdUsersUserIdDeleteRaw(requestParameters: OrgOrgIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a user
     */
    orgOrgIdUsersUserIdDelete(requestParameters: OrgOrgIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a user
     * @param {string} orgId ID of the organization
     * @param {string} userId ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    orgOrgIdUsersUserIdGetRaw(requestParameters: OrgOrgIdUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     * Get a user
     */
    orgOrgIdUsersUserIdGet(requestParameters: OrgOrgIdUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * 
     * @summary Change the user\'s required identity for accessing the organization.
     * @param {string} orgId ID of the organization
     * @param {string} userId ID of the user
     * @param {LocalIdentity} localIdentity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    orgOrgIdUsersUserIdIdentitiesSetRequiredPutRaw(requestParameters: OrgOrgIdUsersUserIdIdentitiesSetRequiredPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Change the user\'s required identity for accessing the organization.
     */
    orgOrgIdUsersUserIdIdentitiesSetRequiredPut(requestParameters: OrgOrgIdUsersUserIdIdentitiesSetRequiredPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update a user
     * @param {string} orgId ID of the organization
     * @param {string} userId ID of the user
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    orgOrgIdUsersUserIdPutRaw(requestParameters: OrgOrgIdUsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     * Update a user
     */
    orgOrgIdUsersUserIdPut(requestParameters: OrgOrgIdUsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {

    /**
     * Get all users
     */
    async orgOrgIdUsersGetRaw(requestParameters: OrgOrgIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling orgOrgIdUsersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("APIKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/users`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Get all users
     */
    async orgOrgIdUsersGet(requestParameters: OrgOrgIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.orgOrgIdUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invite a user
     */
    async orgOrgIdUsersInvitePostRaw(requestParameters: OrgOrgIdUsersInvitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling orgOrgIdUsersInvitePost.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling orgOrgIdUsersInvitePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("APIKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/users/invite`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invite a user
     */
    async orgOrgIdUsersInvitePost(requestParameters: OrgOrgIdUsersInvitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orgOrgIdUsersInvitePostRaw(requestParameters, initOverrides);
    }

    /**
     * Create a user
     */
    async orgOrgIdUsersPostRaw(requestParameters: OrgOrgIdUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling orgOrgIdUsersPost.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling orgOrgIdUsersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("APIKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/users`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Create a user
     */
    async orgOrgIdUsersPost(requestParameters: OrgOrgIdUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.orgOrgIdUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a user
     */
    async orgOrgIdUsersUserIdDeleteRaw(requestParameters: OrgOrgIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling orgOrgIdUsersUserIdDelete.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling orgOrgIdUsersUserIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("APIKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/users/{userId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a user
     */
    async orgOrgIdUsersUserIdDelete(requestParameters: OrgOrgIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orgOrgIdUsersUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a user
     */
    async orgOrgIdUsersUserIdGetRaw(requestParameters: OrgOrgIdUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling orgOrgIdUsersUserIdGet.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling orgOrgIdUsersUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("APIKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/users/{userId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get a user
     */
    async orgOrgIdUsersUserIdGet(requestParameters: OrgOrgIdUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.orgOrgIdUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the user\'s required identity for accessing the organization.
     */
    async orgOrgIdUsersUserIdIdentitiesSetRequiredPutRaw(requestParameters: OrgOrgIdUsersUserIdIdentitiesSetRequiredPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling orgOrgIdUsersUserIdIdentitiesSetRequiredPut.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling orgOrgIdUsersUserIdIdentitiesSetRequiredPut.');
        }

        if (requestParameters.localIdentity === null || requestParameters.localIdentity === undefined) {
            throw new runtime.RequiredError('localIdentity','Required parameter requestParameters.localIdentity was null or undefined when calling orgOrgIdUsersUserIdIdentitiesSetRequiredPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("APIKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/users/{userId}/identities/setRequired`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LocalIdentityToJSON(requestParameters.localIdentity),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change the user\'s required identity for accessing the organization.
     */
    async orgOrgIdUsersUserIdIdentitiesSetRequiredPut(requestParameters: OrgOrgIdUsersUserIdIdentitiesSetRequiredPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orgOrgIdUsersUserIdIdentitiesSetRequiredPutRaw(requestParameters, initOverrides);
    }

    /**
     * Update a user
     */
    async orgOrgIdUsersUserIdPutRaw(requestParameters: OrgOrgIdUsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling orgOrgIdUsersUserIdPut.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling orgOrgIdUsersUserIdPut.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling orgOrgIdUsersUserIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("APIKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{orgId}/users/{userId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Update a user
     */
    async orgOrgIdUsersUserIdPut(requestParameters: OrgOrgIdUsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.orgOrgIdUsersUserIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
