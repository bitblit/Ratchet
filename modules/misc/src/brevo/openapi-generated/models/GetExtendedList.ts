/* tslint:disable */
/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
import type { GetExtendedListAllOfCampaignStats } from './GetExtendedListAllOfCampaignStats.js';
import {
    GetExtendedListAllOfCampaignStatsFromJSON,
    GetExtendedListAllOfCampaignStatsFromJSONTyped,
    GetExtendedListAllOfCampaignStatsToJSON,
} from './GetExtendedListAllOfCampaignStats.js';

/**
 * 
 * @export
 * @interface GetExtendedList
 */
export interface GetExtendedList {
    /**
     * ID of the list
     * @type {number}
     * @memberof GetExtendedList
     */
    id: number;
    /**
     * Name of the list
     * @type {string}
     * @memberof GetExtendedList
     */
    name: string;
    /**
     * Number of blacklisted contacts in the list
     * @type {number}
     * @memberof GetExtendedList
     */
    totalBlacklisted: number;
    /**
     * Number of contacts in the list
     * @type {number}
     * @memberof GetExtendedList
     */
    totalSubscribers: number;
    /**
     * ID of the folder
     * @type {number}
     * @memberof GetExtendedList
     */
    folderId: number;
    /**
     * Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)
     * @type {Date}
     * @memberof GetExtendedList
     */
    createdAt: Date;
    /**
     * 
     * @type {Array<GetExtendedListAllOfCampaignStats>}
     * @memberof GetExtendedList
     */
    campaignStats?: Array<GetExtendedListAllOfCampaignStats>;
    /**
     * Status telling if the list is dynamic or not (true=dynamic, false=not dynamic)
     * @type {boolean}
     * @memberof GetExtendedList
     */
    dynamicList?: boolean;
}

/**
 * Check if a given object implements the GetExtendedList interface.
 */
export function instanceOfGetExtendedList(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "totalBlacklisted" in value;
    isInstance = isInstance && "totalSubscribers" in value;
    isInstance = isInstance && "folderId" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function GetExtendedListFromJSON(json: any): GetExtendedList {
    return GetExtendedListFromJSONTyped(json, false);
}

export function GetExtendedListFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetExtendedList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'totalBlacklisted': json['totalBlacklisted'],
        'totalSubscribers': json['totalSubscribers'],
        'folderId': json['folderId'],
        'createdAt': (new Date(json['createdAt'])),
        'campaignStats': !exists(json, 'campaignStats') ? undefined : ((json['campaignStats'] as Array<any>).map(GetExtendedListAllOfCampaignStatsFromJSON)),
        'dynamicList': !exists(json, 'dynamicList') ? undefined : json['dynamicList'],
    };
}

export function GetExtendedListToJSON(value?: GetExtendedList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'totalBlacklisted': value.totalBlacklisted,
        'totalSubscribers': value.totalSubscribers,
        'folderId': value.folderId,
        'createdAt': (value.createdAt.toISOString()),
        'campaignStats': value.campaignStats === undefined ? undefined : ((value.campaignStats as Array<any>).map(GetExtendedListAllOfCampaignStatsToJSON)),
        'dynamicList': value.dynamicList,
    };
}

