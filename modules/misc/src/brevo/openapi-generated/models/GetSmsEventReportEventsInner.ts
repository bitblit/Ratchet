/* tslint:disable */
/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface GetSmsEventReportEventsInner
 */
export interface GetSmsEventReportEventsInner {
    /**
     * Phone number which has generated the event
     * @type {string}
     * @memberof GetSmsEventReportEventsInner
     */
    phoneNumber: string;
    /**
     * UTC date-time on which the event has been generated
     * @type {Date}
     * @memberof GetSmsEventReportEventsInner
     */
    date: Date;
    /**
     * Message ID which generated the event
     * @type {string}
     * @memberof GetSmsEventReportEventsInner
     */
    messageId: string;
    /**
     * Event which occurred
     * @type {string}
     * @memberof GetSmsEventReportEventsInner
     */
    event: GetSmsEventReportEventsInnerEventEnum;
    /**
     * Reason of bounce (only available if the event is hardbounce or softbounce)
     * @type {string}
     * @memberof GetSmsEventReportEventsInner
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSmsEventReportEventsInner
     */
    reply?: string;
    /**
     * Tag of the SMS which generated the event
     * @type {string}
     * @memberof GetSmsEventReportEventsInner
     */
    tag?: string;
}

/**
* @export
* @enum {string}
*/
export enum GetSmsEventReportEventsInnerEventEnum {
    Bounces = 'bounces',
    HardBounces = 'hardBounces',
    SoftBounces = 'softBounces',
    Delivered = 'delivered',
    Sent = 'sent',
    Accepted = 'accepted',
    Unsubscription = 'unsubscription',
    Replies = 'replies',
    Blocked = 'blocked',
    Rejected = 'rejected'
}


/**
 * Check if a given object implements the GetSmsEventReportEventsInner interface.
 */
export function instanceOfGetSmsEventReportEventsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "phoneNumber" in value;
    isInstance = isInstance && "date" in value;
    isInstance = isInstance && "messageId" in value;
    isInstance = isInstance && "event" in value;

    return isInstance;
}

export function GetSmsEventReportEventsInnerFromJSON(json: any): GetSmsEventReportEventsInner {
    return GetSmsEventReportEventsInnerFromJSONTyped(json, false);
}

export function GetSmsEventReportEventsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetSmsEventReportEventsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'phoneNumber': json['phoneNumber'],
        'date': (new Date(json['date'])),
        'messageId': json['messageId'],
        'event': json['event'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'reply': !exists(json, 'reply') ? undefined : json['reply'],
        'tag': !exists(json, 'tag') ? undefined : json['tag'],
    };
}

export function GetSmsEventReportEventsInnerToJSON(value?: GetSmsEventReportEventsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'phoneNumber': value.phoneNumber,
        'date': (value.date.toISOString()),
        'messageId': value.messageId,
        'event': value.event,
        'reason': value.reason,
        'reply': value.reply,
        'tag': value.tag,
    };
}

