/* tslint:disable */
/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
import type { SendSmtpEmailAttachmentInner } from './SendSmtpEmailAttachmentInner.js';
import {
    SendSmtpEmailAttachmentInnerFromJSON,
    SendSmtpEmailAttachmentInnerFromJSONTyped,
    SendSmtpEmailAttachmentInnerToJSON,
} from './SendSmtpEmailAttachmentInner.js';
import type { SendSmtpEmailBccInner } from './SendSmtpEmailBccInner.js';
import {
    SendSmtpEmailBccInnerFromJSON,
    SendSmtpEmailBccInnerFromJSONTyped,
    SendSmtpEmailBccInnerToJSON,
} from './SendSmtpEmailBccInner.js';
import type { SendSmtpEmailCcInner } from './SendSmtpEmailCcInner.js';
import {
    SendSmtpEmailCcInnerFromJSON,
    SendSmtpEmailCcInnerFromJSONTyped,
    SendSmtpEmailCcInnerToJSON,
} from './SendSmtpEmailCcInner.js';
import type { SendSmtpEmailReplyTo } from './SendSmtpEmailReplyTo.js';
import {
    SendSmtpEmailReplyToFromJSON,
    SendSmtpEmailReplyToFromJSONTyped,
    SendSmtpEmailReplyToToJSON,
} from './SendSmtpEmailReplyTo.js';
import type { SendSmtpEmailSender } from './SendSmtpEmailSender.js';
import {
    SendSmtpEmailSenderFromJSON,
    SendSmtpEmailSenderFromJSONTyped,
    SendSmtpEmailSenderToJSON,
} from './SendSmtpEmailSender.js';
import type { SendSmtpEmailToInner } from './SendSmtpEmailToInner.js';
import {
    SendSmtpEmailToInnerFromJSON,
    SendSmtpEmailToInnerFromJSONTyped,
    SendSmtpEmailToInnerToJSON,
} from './SendSmtpEmailToInner.js';

/**
 * 
 * @export
 * @interface SendSmtpEmail
 */
export interface SendSmtpEmail {
    /**
     * 
     * @type {SendSmtpEmailSender}
     * @memberof SendSmtpEmail
     */
    sender?: SendSmtpEmailSender;
    /**
     * List of email addresses and names (optional) of the recipients. For example, [{"name":"Jimmy", "email":"jimmy98@example.com"}, {"name":"Joe", "email":"joe@example.com"}]
     * @type {Array<SendSmtpEmailToInner>}
     * @memberof SendSmtpEmail
     */
    to: Array<SendSmtpEmailToInner>;
    /**
     * List of email addresses and names (optional) of the recipients in bcc
     * @type {Array<SendSmtpEmailBccInner>}
     * @memberof SendSmtpEmail
     */
    bcc?: Array<SendSmtpEmailBccInner>;
    /**
     * List of email addresses and names (optional) of the recipients in cc
     * @type {Array<SendSmtpEmailCcInner>}
     * @memberof SendSmtpEmail
     */
    cc?: Array<SendSmtpEmailCcInner>;
    /**
     * HTML body of the message ( Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed )
     * @type {string}
     * @memberof SendSmtpEmail
     */
    htmlContent?: string;
    /**
     * Plain Text body of the message ( Ignored if 'templateId' is passed )
     * @type {string}
     * @memberof SendSmtpEmail
     */
    textContent?: string;
    /**
     * Subject of the message. Mandatory if 'templateId' is not passed
     * @type {string}
     * @memberof SendSmtpEmail
     */
    subject?: string;
    /**
     * 
     * @type {SendSmtpEmailReplyTo}
     * @memberof SendSmtpEmail
     */
    replyTo?: SendSmtpEmailReplyTo;
    /**
     * Pass the absolute URL (no local file) or the base64 content of the attachment along with the attachment name (Mandatory if attachment content is passed). For example, `[{"url":"https://attachment.domain.com/myAttachmentFromUrl.jpg", "name":"myAttachmentFromUrl.jpg"}, {"content":"base64 example content", "name":"myAttachmentFromBase64.jpg"}]`. Allowed extensions for attachment file: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg and wmv ( If 'templateId' is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then 'attachment' is ignored )
     * @type {Array<SendSmtpEmailAttachmentInner>}
     * @memberof SendSmtpEmail
     */
    attachment?: Array<SendSmtpEmailAttachmentInner>;
    /**
     * Pass the set of custom headers (not the standard headers) that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, `{"sender.ip":"1.2.3.4", "X-Mailin-custom":"some_custom_header", "idempotencyKey":"abc-123"}`.
     * @type {object}
     * @memberof SendSmtpEmail
     */
    headers?: object;
    /**
     * Id of the template
     * @type {number}
     * @memberof SendSmtpEmail
     */
    templateId?: number;
    /**
     * Pass the set of attributes to customize the template. For example, {"FNAME":"Joe", "LNAME":"Doe"}. It's considered only if template is in New Template Language format.
     * @type {object}
     * @memberof SendSmtpEmail
     */
    params?: object;
    /**
     * Tag your emails to find them more easily
     * @type {Array<string>}
     * @memberof SendSmtpEmail
     */
    tags?: Array<string>;
}

/**
 * Check if a given object implements the SendSmtpEmail interface.
 */
export function instanceOfSendSmtpEmail(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "to" in value;

    return isInstance;
}

export function SendSmtpEmailFromJSON(json: any): SendSmtpEmail {
    return SendSmtpEmailFromJSONTyped(json, false);
}

export function SendSmtpEmailFromJSONTyped(json: any, ignoreDiscriminator: boolean): SendSmtpEmail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sender': !exists(json, 'sender') ? undefined : SendSmtpEmailSenderFromJSON(json['sender']),
        'to': ((json['to'] as Array<any>).map(SendSmtpEmailToInnerFromJSON)),
        'bcc': !exists(json, 'bcc') ? undefined : ((json['bcc'] as Array<any>).map(SendSmtpEmailBccInnerFromJSON)),
        'cc': !exists(json, 'cc') ? undefined : ((json['cc'] as Array<any>).map(SendSmtpEmailCcInnerFromJSON)),
        'htmlContent': !exists(json, 'htmlContent') ? undefined : json['htmlContent'],
        'textContent': !exists(json, 'textContent') ? undefined : json['textContent'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'replyTo': !exists(json, 'replyTo') ? undefined : SendSmtpEmailReplyToFromJSON(json['replyTo']),
        'attachment': !exists(json, 'attachment') ? undefined : ((json['attachment'] as Array<any>).map(SendSmtpEmailAttachmentInnerFromJSON)),
        'headers': !exists(json, 'headers') ? undefined : json['headers'],
        'templateId': !exists(json, 'templateId') ? undefined : json['templateId'],
        'params': !exists(json, 'params') ? undefined : json['params'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
    };
}

export function SendSmtpEmailToJSON(value?: SendSmtpEmail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sender': SendSmtpEmailSenderToJSON(value.sender),
        'to': ((value.to as Array<any>).map(SendSmtpEmailToInnerToJSON)),
        'bcc': value.bcc === undefined ? undefined : ((value.bcc as Array<any>).map(SendSmtpEmailBccInnerToJSON)),
        'cc': value.cc === undefined ? undefined : ((value.cc as Array<any>).map(SendSmtpEmailCcInnerToJSON)),
        'htmlContent': value.htmlContent,
        'textContent': value.textContent,
        'subject': value.subject,
        'replyTo': SendSmtpEmailReplyToToJSON(value.replyTo),
        'attachment': value.attachment === undefined ? undefined : ((value.attachment as Array<any>).map(SendSmtpEmailAttachmentInnerToJSON)),
        'headers': value.headers,
        'templateId': value.templateId,
        'params': value.params,
        'tags': value.tags,
    };
}

