/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime.js';
import type {
  AddChildDomain,
  AddCredits,
  CreateChild,
  CreateReseller,
  ErrorModel,
  GetChildAccountCreationStatus,
  GetChildDomain,
  GetChildInfo,
  GetChildrenList,
  GetSsoToken,
  ManageIp,
  RemainingCreditModel,
  RemoveCredits,
  UpdateChild,
  UpdateChildAccountStatus,
  UpdateChildDomain,
} from '../models/index.js';
import {
  AddChildDomainFromJSON,
  AddChildDomainToJSON,
  AddCreditsFromJSON,
  AddCreditsToJSON,
  CreateChildFromJSON,
  CreateChildToJSON,
  CreateResellerFromJSON,
  CreateResellerToJSON,
  ErrorModelFromJSON,
  ErrorModelToJSON,
  GetChildAccountCreationStatusFromJSON,
  GetChildAccountCreationStatusToJSON,
  GetChildDomainFromJSON,
  GetChildDomainToJSON,
  GetChildInfoFromJSON,
  GetChildInfoToJSON,
  GetChildrenListFromJSON,
  GetChildrenListToJSON,
  GetSsoTokenFromJSON,
  GetSsoTokenToJSON,
  ManageIpFromJSON,
  ManageIpToJSON,
  RemainingCreditModelFromJSON,
  RemainingCreditModelToJSON,
  RemoveCreditsFromJSON,
  RemoveCreditsToJSON,
  UpdateChildFromJSON,
  UpdateChildToJSON,
  UpdateChildAccountStatusFromJSON,
  UpdateChildAccountStatusToJSON,
  UpdateChildDomainFromJSON,
  UpdateChildDomainToJSON,
} from '../models/index.js';

export interface AddCreditsRequest {
  childIdentifier: string;
  addCredits: AddCredits;
}

export interface AssociateIpToChildRequest {
  childIdentifier: string;
  ip: ManageIp;
}

export interface CreateChildDomainRequest {
  childIdentifier: string;
  addChildDomain: AddChildDomain;
}

export interface CreateResellerChildRequest {
  resellerChild?: CreateChild;
}

export interface DeleteChildDomainRequest {
  childIdentifier: string;
  domainName: string;
}

export interface DeleteResellerChildRequest {
  childIdentifier: string;
}

export interface DissociateIpFromChildRequest {
  childIdentifier: string;
  ip: ManageIp;
}

export interface GetChildAccountCreationStatusRequest {
  childIdentifier: string;
}

export interface GetChildDomainsRequest {
  childIdentifier: string;
}

export interface GetChildInfoRequest {
  childIdentifier: string;
}

export interface GetResellerChildsRequest {
  limit?: number;
  offset?: number;
}

export interface GetSsoTokenRequest {
  childIdentifier: string;
}

export interface RemoveCreditsRequest {
  childIdentifier: string;
  removeCredits: RemoveCredits;
}

export interface UpdateChildAccountStatusRequest {
  childIdentifier: string;
  updateChildAccountStatus: UpdateChildAccountStatus;
}

export interface UpdateChildDomainRequest {
  childIdentifier: string;
  domainName: string;
  updateChildDomain: UpdateChildDomain;
}

export interface UpdateResellerChildRequest {
  childIdentifier: string;
  resellerChild: UpdateChild;
}

/**
 * ResellerApi - interface
 *
 * @export
 * @interface ResellerApiInterface
 */
export interface ResellerApiInterface {
  /**
   *
   * @summary Add Email and/or SMS credits to a specific child account
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {AddCredits} addCredits Values to post to add credit to a specific child account
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  addCreditsRaw(
    requestParameters: AddCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RemainingCreditModel>>;

  /**
   * Add Email and/or SMS credits to a specific child account
   */
  addCredits(
    requestParameters: AddCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RemainingCreditModel>;

  /**
   *
   * @summary Associate a dedicated IP to the child
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {ManageIp} ip IP to associate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  associateIpToChildRaw(
    requestParameters: AssociateIpToChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Associate a dedicated IP to the child
   */
  associateIpToChild(
    requestParameters: AssociateIpToChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;

  /**
   *
   * @summary Create a domain for a child account
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {AddChildDomain} addChildDomain Sender domain to add for a specific child account. This will not be displayed to the parent account.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  createChildDomainRaw(
    requestParameters: CreateChildDomainRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Create a domain for a child account
   */
  createChildDomain(requestParameters: CreateChildDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Creates a reseller child
   * @param {CreateChild} [resellerChild] reseller child to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  createResellerChildRaw(
    requestParameters: CreateResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateReseller>>;

  /**
   * Creates a reseller child
   */
  createResellerChild(
    requestParameters: CreateResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateReseller>;

  /**
   *
   * @summary Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {string} domainName Pass the existing domain that needs to be deleted
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  deleteChildDomainRaw(
    requestParameters: DeleteChildDomainRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
   */
  deleteChildDomain(requestParameters: DeleteChildDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Delete a single reseller child based on the child identifier supplied
   * @param {string} childIdentifier Either auth key or child id of reseller\&#39;s child
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  deleteResellerChildRaw(
    requestParameters: DeleteResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Delete a single reseller child based on the child identifier supplied
   */
  deleteResellerChild(
    requestParameters: DeleteResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;

  /**
   *
   * @summary Dissociate a dedicated IP to the child
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {ManageIp} ip IP to dissociate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  dissociateIpFromChildRaw(
    requestParameters: DissociateIpFromChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Dissociate a dedicated IP to the child
   */
  dissociateIpFromChild(
    requestParameters: DissociateIpFromChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;

  /**
   *
   * @summary Get the status of a reseller\'s child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  getChildAccountCreationStatusRaw(
    requestParameters: GetChildAccountCreationStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetChildAccountCreationStatus>>;

  /**
   * Get the status of a reseller\'s child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
   */
  getChildAccountCreationStatus(
    requestParameters: GetChildAccountCreationStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetChildAccountCreationStatus>;

  /**
   *
   * @summary Get all sender domains for a specific child account
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  getChildDomainsRaw(
    requestParameters: GetChildDomainsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetChildDomain>>>;

  /**
   * Get all sender domains for a specific child account
   */
  getChildDomains(
    requestParameters: GetChildDomainsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetChildDomain>>;

  /**
   *
   * @summary Get a child account\'s details
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  getChildInfoRaw(
    requestParameters: GetChildInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetChildInfo>>;

  /**
   * Get a child account\'s details
   */
  getChildInfo(requestParameters: GetChildInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChildInfo>;

  /**
   *
   * @summary Get the list of all children accounts
   * @param {number} [limit] Number of documents for child accounts information per page
   * @param {number} [offset] Index of the first document in the page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  getResellerChildsRaw(
    requestParameters: GetResellerChildsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetChildrenList>>;

  /**
   * Get the list of all children accounts
   */
  getResellerChilds(
    requestParameters: GetResellerChildsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetChildrenList>;

  /**
   * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]
   * @summary Get session token to access Sendinblue (SSO)
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  getSsoTokenRaw(
    requestParameters: GetSsoTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSsoToken>>;

  /**
   * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]
   * Get session token to access Sendinblue (SSO)
   */
  getSsoToken(requestParameters: GetSsoTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSsoToken>;

  /**
   *
   * @summary Remove Email and/or SMS credits from a specific child account
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {RemoveCredits} removeCredits Values to post to remove email or SMS credits from a specific child account
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  removeCreditsRaw(
    requestParameters: RemoveCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RemainingCreditModel>>;

  /**
   * Remove Email and/or SMS credits from a specific child account
   */
  removeCredits(
    requestParameters: RemoveCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RemainingCreditModel>;

  /**
   *
   * @summary Update info of reseller\'s child account status based on the identifier supplied
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {UpdateChildAccountStatus} updateChildAccountStatus values to update in child account status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  updateChildAccountStatusRaw(
    requestParameters: UpdateChildAccountStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Update info of reseller\'s child account status based on the identifier supplied
   */
  updateChildAccountStatus(
    requestParameters: UpdateChildAccountStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;

  /**
   *
   * @summary Update the sender domain of reseller\'s child based on the childIdentifier and domainName passed
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {string} domainName Pass the existing domain that needs to be updated
   * @param {UpdateChildDomain} updateChildDomain value to update for sender domain
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  updateChildDomainRaw(
    requestParameters: UpdateChildDomainRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Update the sender domain of reseller\'s child based on the childIdentifier and domainName passed
   */
  updateChildDomain(requestParameters: UpdateChildDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Update info of reseller\'s child based on the child identifier supplied
   * @param {string} childIdentifier Either auth key or id of reseller\&#39;s child
   * @param {UpdateChild} resellerChild values to update in child profile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResellerApiInterface
   */
  updateResellerChildRaw(
    requestParameters: UpdateResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Update info of reseller\'s child based on the child identifier supplied
   */
  updateResellerChild(
    requestParameters: UpdateResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;
}

/**
 *
 */
export class ResellerApi extends runtime.BaseAPI implements ResellerApiInterface {
  /**
   * Add Email and/or SMS credits to a specific child account
   */
  async addCreditsRaw(
    requestParameters: AddCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RemainingCreditModel>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling addCredits.',
      );
    }

    if (requestParameters.addCredits === null || requestParameters.addCredits === undefined) {
      throw new runtime.RequiredError(
        'addCredits',
        'Required parameter requestParameters.addCredits was null or undefined when calling addCredits.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/credits/add`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AddCreditsToJSON(requestParameters.addCredits),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RemainingCreditModelFromJSON(jsonValue));
  }

  /**
   * Add Email and/or SMS credits to a specific child account
   */
  async addCredits(
    requestParameters: AddCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RemainingCreditModel> {
    const response = await this.addCreditsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Associate a dedicated IP to the child
   */
  async associateIpToChildRaw(
    requestParameters: AssociateIpToChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling associateIpToChild.',
      );
    }

    if (requestParameters.ip === null || requestParameters.ip === undefined) {
      throw new runtime.RequiredError(
        'ip',
        'Required parameter requestParameters.ip was null or undefined when calling associateIpToChild.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/ips/associate`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ManageIpToJSON(requestParameters.ip),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Associate a dedicated IP to the child
   */
  async associateIpToChild(
    requestParameters: AssociateIpToChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.associateIpToChildRaw(requestParameters, initOverrides);
  }

  /**
   * Create a domain for a child account
   */
  async createChildDomainRaw(
    requestParameters: CreateChildDomainRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling createChildDomain.',
      );
    }

    if (requestParameters.addChildDomain === null || requestParameters.addChildDomain === undefined) {
      throw new runtime.RequiredError(
        'addChildDomain',
        'Required parameter requestParameters.addChildDomain was null or undefined when calling createChildDomain.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/domains`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AddChildDomainToJSON(requestParameters.addChildDomain),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create a domain for a child account
   */
  async createChildDomain(
    requestParameters: CreateChildDomainRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.createChildDomainRaw(requestParameters, initOverrides);
  }

  /**
   * Creates a reseller child
   */
  async createResellerChildRaw(
    requestParameters: CreateResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateReseller>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateChildToJSON(requestParameters.resellerChild),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CreateResellerFromJSON(jsonValue));
  }

  /**
   * Creates a reseller child
   */
  async createResellerChild(
    requestParameters: CreateResellerChildRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateReseller> {
    const response = await this.createResellerChildRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
   */
  async deleteChildDomainRaw(
    requestParameters: DeleteChildDomainRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling deleteChildDomain.',
      );
    }

    if (requestParameters.domainName === null || requestParameters.domainName === undefined) {
      throw new runtime.RequiredError(
        'domainName',
        'Required parameter requestParameters.domainName was null or undefined when calling deleteChildDomain.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/domains/{domainName}`
          .replace(`{${'childIdentifier'}}`, encodeURIComponent(String(requestParameters.childIdentifier)))
          .replace(`{${'domainName'}}`, encodeURIComponent(String(requestParameters.domainName))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
   */
  async deleteChildDomain(
    requestParameters: DeleteChildDomainRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteChildDomainRaw(requestParameters, initOverrides);
  }

  /**
   * Delete a single reseller child based on the child identifier supplied
   */
  async deleteResellerChildRaw(
    requestParameters: DeleteResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling deleteResellerChild.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a single reseller child based on the child identifier supplied
   */
  async deleteResellerChild(
    requestParameters: DeleteResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteResellerChildRaw(requestParameters, initOverrides);
  }

  /**
   * Dissociate a dedicated IP to the child
   */
  async dissociateIpFromChildRaw(
    requestParameters: DissociateIpFromChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling dissociateIpFromChild.',
      );
    }

    if (requestParameters.ip === null || requestParameters.ip === undefined) {
      throw new runtime.RequiredError(
        'ip',
        'Required parameter requestParameters.ip was null or undefined when calling dissociateIpFromChild.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/ips/dissociate`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ManageIpToJSON(requestParameters.ip),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Dissociate a dedicated IP to the child
   */
  async dissociateIpFromChild(
    requestParameters: DissociateIpFromChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.dissociateIpFromChildRaw(requestParameters, initOverrides);
  }

  /**
   * Get the status of a reseller\'s child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
   */
  async getChildAccountCreationStatusRaw(
    requestParameters: GetChildAccountCreationStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetChildAccountCreationStatus>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling getChildAccountCreationStatus.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/accountCreationStatus`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetChildAccountCreationStatusFromJSON(jsonValue));
  }

  /**
   * Get the status of a reseller\'s child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
   */
  async getChildAccountCreationStatus(
    requestParameters: GetChildAccountCreationStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetChildAccountCreationStatus> {
    const response = await this.getChildAccountCreationStatusRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all sender domains for a specific child account
   */
  async getChildDomainsRaw(
    requestParameters: GetChildDomainsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetChildDomain>>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling getChildDomains.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/domains`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetChildDomainFromJSON));
  }

  /**
   * Get all sender domains for a specific child account
   */
  async getChildDomains(
    requestParameters: GetChildDomainsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetChildDomain>> {
    const response = await this.getChildDomainsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get a child account\'s details
   */
  async getChildInfoRaw(
    requestParameters: GetChildInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetChildInfo>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling getChildInfo.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetChildInfoFromJSON(jsonValue));
  }

  /**
   * Get a child account\'s details
   */
  async getChildInfo(
    requestParameters: GetChildInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetChildInfo> {
    const response = await this.getChildInfoRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get the list of all children accounts
   */
  async getResellerChildsRaw(
    requestParameters: GetResellerChildsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetChildrenList>> {
    const queryParameters: any = {};

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetChildrenListFromJSON(jsonValue));
  }

  /**
   * Get the list of all children accounts
   */
  async getResellerChilds(
    requestParameters: GetResellerChildsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetChildrenList> {
    const response = await this.getResellerChildsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]
   * Get session token to access Sendinblue (SSO)
   */
  async getSsoTokenRaw(
    requestParameters: GetSsoTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSsoToken>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling getSsoToken.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/auth`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetSsoTokenFromJSON(jsonValue));
  }

  /**
   * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]
   * Get session token to access Sendinblue (SSO)
   */
  async getSsoToken(
    requestParameters: GetSsoTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetSsoToken> {
    const response = await this.getSsoTokenRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Remove Email and/or SMS credits from a specific child account
   */
  async removeCreditsRaw(
    requestParameters: RemoveCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RemainingCreditModel>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling removeCredits.',
      );
    }

    if (requestParameters.removeCredits === null || requestParameters.removeCredits === undefined) {
      throw new runtime.RequiredError(
        'removeCredits',
        'Required parameter requestParameters.removeCredits was null or undefined when calling removeCredits.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/credits/remove`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RemoveCreditsToJSON(requestParameters.removeCredits),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RemainingCreditModelFromJSON(jsonValue));
  }

  /**
   * Remove Email and/or SMS credits from a specific child account
   */
  async removeCredits(
    requestParameters: RemoveCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RemainingCreditModel> {
    const response = await this.removeCreditsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update info of reseller\'s child account status based on the identifier supplied
   */
  async updateChildAccountStatusRaw(
    requestParameters: UpdateChildAccountStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling updateChildAccountStatus.',
      );
    }

    if (requestParameters.updateChildAccountStatus === null || requestParameters.updateChildAccountStatus === undefined) {
      throw new runtime.RequiredError(
        'updateChildAccountStatus',
        'Required parameter requestParameters.updateChildAccountStatus was null or undefined when calling updateChildAccountStatus.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/accountStatus`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateChildAccountStatusToJSON(requestParameters.updateChildAccountStatus),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update info of reseller\'s child account status based on the identifier supplied
   */
  async updateChildAccountStatus(
    requestParameters: UpdateChildAccountStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateChildAccountStatusRaw(requestParameters, initOverrides);
  }

  /**
   * Update the sender domain of reseller\'s child based on the childIdentifier and domainName passed
   */
  async updateChildDomainRaw(
    requestParameters: UpdateChildDomainRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling updateChildDomain.',
      );
    }

    if (requestParameters.domainName === null || requestParameters.domainName === undefined) {
      throw new runtime.RequiredError(
        'domainName',
        'Required parameter requestParameters.domainName was null or undefined when calling updateChildDomain.',
      );
    }

    if (requestParameters.updateChildDomain === null || requestParameters.updateChildDomain === undefined) {
      throw new runtime.RequiredError(
        'updateChildDomain',
        'Required parameter requestParameters.updateChildDomain was null or undefined when calling updateChildDomain.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}/domains/{domainName}`
          .replace(`{${'childIdentifier'}}`, encodeURIComponent(String(requestParameters.childIdentifier)))
          .replace(`{${'domainName'}}`, encodeURIComponent(String(requestParameters.domainName))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateChildDomainToJSON(requestParameters.updateChildDomain),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update the sender domain of reseller\'s child based on the childIdentifier and domainName passed
   */
  async updateChildDomain(
    requestParameters: UpdateChildDomainRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateChildDomainRaw(requestParameters, initOverrides);
  }

  /**
   * Update info of reseller\'s child based on the child identifier supplied
   */
  async updateResellerChildRaw(
    requestParameters: UpdateResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.childIdentifier === null || requestParameters.childIdentifier === undefined) {
      throw new runtime.RequiredError(
        'childIdentifier',
        'Required parameter requestParameters.childIdentifier was null or undefined when calling updateResellerChild.',
      );
    }

    if (requestParameters.resellerChild === null || requestParameters.resellerChild === undefined) {
      throw new runtime.RequiredError(
        'resellerChild',
        'Required parameter requestParameters.resellerChild was null or undefined when calling updateResellerChild.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/reseller/children/{childIdentifier}`.replace(
          `{${'childIdentifier'}}`,
          encodeURIComponent(String(requestParameters.childIdentifier)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateChildToJSON(requestParameters.resellerChild),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update info of reseller\'s child based on the child identifier supplied
   */
  async updateResellerChild(
    requestParameters: UpdateResellerChildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateResellerChildRaw(requestParameters, initOverrides);
  }
}
