/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AbTestCampaignResult,
  CreateEmailCampaign,
  CreateModel,
  CreatedProcessId,
  EmailExportRecipients,
  ErrorModel,
  GetEmailCampaign,
  GetEmailCampaigns,
  GetSharedTemplateUrl,
  PostSendFailed,
  SendReport,
  SendTestEmail,
  UpdateCampaignStatus,
  UpdateEmailCampaign,
  UploadImageToGallery,
} from '../models/index.js';
import {
    AbTestCampaignResultFromJSON,
    AbTestCampaignResultToJSON,
    CreateEmailCampaignFromJSON,
    CreateEmailCampaignToJSON,
    CreateModelFromJSON,
    CreateModelToJSON,
    CreatedProcessIdFromJSON,
    CreatedProcessIdToJSON,
    EmailExportRecipientsFromJSON,
    EmailExportRecipientsToJSON,
    ErrorModelFromJSON,
    ErrorModelToJSON,
    GetEmailCampaignFromJSON,
    GetEmailCampaignToJSON,
    GetEmailCampaignsFromJSON,
    GetEmailCampaignsToJSON,
    GetSharedTemplateUrlFromJSON,
    GetSharedTemplateUrlToJSON,
    PostSendFailedFromJSON,
    PostSendFailedToJSON,
    SendReportFromJSON,
    SendReportToJSON,
    SendTestEmailFromJSON,
    SendTestEmailToJSON,
    UpdateCampaignStatusFromJSON,
    UpdateCampaignStatusToJSON,
    UpdateEmailCampaignFromJSON,
    UpdateEmailCampaignToJSON,
    UploadImageToGalleryFromJSON,
    UploadImageToGalleryToJSON,
} from '../models/index.js';

export interface CreateEmailCampaignRequest {
    emailCampaigns: CreateEmailCampaign;
}

export interface DeleteEmailCampaignRequest {
    campaignId: number;
}

export interface EmailExportRecipientsRequest {
    campaignId: number;
    recipientExport?: EmailExportRecipients;
}

export interface GetAbTestCampaignResultRequest {
    campaignId: number;
}

export interface GetEmailCampaignRequest {
    campaignId: number;
    statistics?: GetEmailCampaignStatisticsEnum;
}

export interface GetEmailCampaignsRequest {
    type?: GetEmailCampaignsTypeEnum;
    status?: GetEmailCampaignsStatusEnum;
    statistics?: GetEmailCampaignsStatisticsEnum;
    startDate?: Date;
    endDate?: Date;
    limit?: number;
    offset?: number;
    excludeHtmlContent?: boolean;
}

export interface GetSharedTemplateUrlRequest {
    campaignId: number;
}

export interface SendEmailCampaignNowRequest {
    campaignId: number;
}

export interface SendReportRequest {
    campaignId: number;
    sendReport: SendReport;
}

export interface SendTestEmailRequest {
    campaignId: number;
    emailTo: SendTestEmail;
}

export interface UpdateCampaignStatusRequest {
    campaignId: number;
    status: UpdateCampaignStatus;
}

export interface UpdateEmailCampaignRequest {
    campaignId: number;
    emailCampaign: UpdateEmailCampaign;
}

export interface UploadImageToGalleryRequest {
    uploadImage: UploadImageToGallery;
}

/**
 * EmailCampaignsApi - interface
 * 
 * @export
 * @interface EmailCampaignsApiInterface
 */
export interface EmailCampaignsApiInterface {
    /**
     * 
     * @summary Create an email campaign
     * @param {CreateEmailCampaign} emailCampaigns Values to create a campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    createEmailCampaignRaw(requestParameters: CreateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateModel>>;

    /**
     * Create an email campaign
     */
    createEmailCampaign(requestParameters: CreateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateModel>;

    /**
     * 
     * @summary Delete an email campaign
     * @param {number} campaignId id of the campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    deleteEmailCampaignRaw(requestParameters: DeleteEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an email campaign
     */
    deleteEmailCampaign(requestParameters: DeleteEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Export the recipients of an email campaign
     * @param {number} campaignId Id of the campaign
     * @param {EmailExportRecipients} [recipientExport] Values to send for a recipient export request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    emailExportRecipientsRaw(requestParameters: EmailExportRecipientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatedProcessId>>;

    /**
     * Export the recipients of an email campaign
     */
    emailExportRecipients(requestParameters: EmailExportRecipientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatedProcessId>;

    /**
     * Obtain winning version of an A/B test email campaign
     * @summary Get an A/B test email campaign results
     * @param {number} campaignId Id of the A/B test campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    getAbTestCampaignResultRaw(requestParameters: GetAbTestCampaignResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbTestCampaignResult>>;

    /**
     * Obtain winning version of an A/B test email campaign
     * Get an A/B test email campaign results
     */
    getAbTestCampaignResult(requestParameters: GetAbTestCampaignResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbTestCampaignResult>;

    /**
     * 
     * @summary Get an email campaign report
     * @param {number} campaignId Id of the campaign
     * @param {'globalStats' | 'linksStats' | 'statsByDomain' | 'statsByDevice' | 'statsByBrowser'} [statistics] Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    getEmailCampaignRaw(requestParameters: GetEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmailCampaign>>;

    /**
     * Get an email campaign report
     */
    getEmailCampaign(requestParameters: GetEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmailCampaign>;

    /**
     * 
     * @summary Return all your created email campaigns
     * @param {'classic' | 'trigger'} [type] Filter on the type of the campaigns
     * @param {'suspended' | 'archive' | 'sent' | 'queued' | 'draft' | 'inProcess'} [status] Filter on the status of the campaign
     * @param {'globalStats' | 'linksStats' | 'statsByDomain'} [statistics] Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
     * @param {Date} [startDate] Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either \&#39;status\&#39; not passed and if passed is set to \&#39;sent\&#39; )
     * @param {Date} [endDate] Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either \&#39;status\&#39; not passed and if passed is set to \&#39;sent\&#39; )
     * @param {number} [limit] Number of documents per page
     * @param {number} [offset] Index of the first document in the page
     * @param {boolean} [excludeHtmlContent] Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    getEmailCampaignsRaw(requestParameters: GetEmailCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmailCampaigns>>;

    /**
     * Return all your created email campaigns
     */
    getEmailCampaigns(requestParameters: GetEmailCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmailCampaigns>;

    /**
     * Get a unique URL to share & import an email template from one Sendinblue account to another.
     * @summary Get a shared template url
     * @param {number} campaignId Id of the campaign or template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    getSharedTemplateUrlRaw(requestParameters: GetSharedTemplateUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSharedTemplateUrl>>;

    /**
     * Get a unique URL to share & import an email template from one Sendinblue account to another.
     * Get a shared template url
     */
    getSharedTemplateUrl(requestParameters: GetSharedTemplateUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSharedTemplateUrl>;

    /**
     * 
     * @summary Send an email campaign immediately, based on campaignId
     * @param {number} campaignId Id of the campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    sendEmailCampaignNowRaw(requestParameters: SendEmailCampaignNowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Send an email campaign immediately, based on campaignId
     */
    sendEmailCampaignNow(requestParameters: SendEmailCampaignNowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * A PDF will be sent to the specified email addresses
     * @summary Send the report of a campaign
     * @param {number} campaignId Id of the campaign
     * @param {SendReport} sendReport Values for send a report
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    sendReportRaw(requestParameters: SendReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * A PDF will be sent to the specified email addresses
     * Send the report of a campaign
     */
    sendReport(requestParameters: SendReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Send an email campaign to your test list
     * @param {number} campaignId Id of the campaign
     * @param {SendTestEmail} emailTo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    sendTestEmailRaw(requestParameters: SendTestEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Send an email campaign to your test list
     */
    sendTestEmail(requestParameters: SendTestEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update an email campaign status
     * @param {number} campaignId Id of the campaign
     * @param {UpdateCampaignStatus} status Status of the campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    updateCampaignStatusRaw(requestParameters: UpdateCampaignStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update an email campaign status
     */
    updateCampaignStatus(requestParameters: UpdateCampaignStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update an email campaign
     * @param {number} campaignId Id of the campaign
     * @param {UpdateEmailCampaign} emailCampaign Values to update a campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    updateEmailCampaignRaw(requestParameters: UpdateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update an email campaign
     */
    updateEmailCampaign(requestParameters: UpdateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Upload an image to your account\'s image gallery
     * @param {UploadImageToGallery} uploadImage Parameters to upload an image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailCampaignsApiInterface
     */
    uploadImageToGalleryRaw(requestParameters: UploadImageToGalleryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Upload an image to your account\'s image gallery
     */
    uploadImageToGallery(requestParameters: UploadImageToGalleryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class EmailCampaignsApi extends runtime.BaseAPI implements EmailCampaignsApiInterface {

    /**
     * Create an email campaign
     */
    async createEmailCampaignRaw(requestParameters: CreateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateModel>> {
        if (requestParameters.emailCampaigns === null || requestParameters.emailCampaigns === undefined) {
            throw new runtime.RequiredError('emailCampaigns','Required parameter requestParameters.emailCampaigns was null or undefined when calling createEmailCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEmailCampaignToJSON(requestParameters.emailCampaigns),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateModelFromJSON(jsonValue));
    }

    /**
     * Create an email campaign
     */
    async createEmailCampaign(requestParameters: CreateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateModel> {
        const response = await this.createEmailCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an email campaign
     */
    async deleteEmailCampaignRaw(requestParameters: DeleteEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling deleteEmailCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/{campaignId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an email campaign
     */
    async deleteEmailCampaign(requestParameters: DeleteEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEmailCampaignRaw(requestParameters, initOverrides);
    }

    /**
     * Export the recipients of an email campaign
     */
    async emailExportRecipientsRaw(requestParameters: EmailExportRecipientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatedProcessId>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling emailExportRecipients.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/{campaignId}/exportRecipients`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailExportRecipientsToJSON(requestParameters.recipientExport),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatedProcessIdFromJSON(jsonValue));
    }

    /**
     * Export the recipients of an email campaign
     */
    async emailExportRecipients(requestParameters: EmailExportRecipientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatedProcessId> {
        const response = await this.emailExportRecipientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtain winning version of an A/B test email campaign
     * Get an A/B test email campaign results
     */
    async getAbTestCampaignResultRaw(requestParameters: GetAbTestCampaignResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbTestCampaignResult>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getAbTestCampaignResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/{campaignId}/abTestCampaignResult`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbTestCampaignResultFromJSON(jsonValue));
    }

    /**
     * Obtain winning version of an A/B test email campaign
     * Get an A/B test email campaign results
     */
    async getAbTestCampaignResult(requestParameters: GetAbTestCampaignResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbTestCampaignResult> {
        const response = await this.getAbTestCampaignResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an email campaign report
     */
    async getEmailCampaignRaw(requestParameters: GetEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmailCampaign>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getEmailCampaign.');
        }

        const queryParameters: any = {};

        if (requestParameters.statistics !== undefined) {
            queryParameters['statistics'] = requestParameters.statistics;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/{campaignId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEmailCampaignFromJSON(jsonValue));
    }

    /**
     * Get an email campaign report
     */
    async getEmailCampaign(requestParameters: GetEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmailCampaign> {
        const response = await this.getEmailCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return all your created email campaigns
     */
    async getEmailCampaignsRaw(requestParameters: GetEmailCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmailCampaigns>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.statistics !== undefined) {
            queryParameters['statistics'] = requestParameters.statistics;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.excludeHtmlContent !== undefined) {
            queryParameters['excludeHtmlContent'] = requestParameters.excludeHtmlContent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEmailCampaignsFromJSON(jsonValue));
    }

    /**
     * Return all your created email campaigns
     */
    async getEmailCampaigns(requestParameters: GetEmailCampaignsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmailCampaigns> {
        const response = await this.getEmailCampaignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a unique URL to share & import an email template from one Sendinblue account to another.
     * Get a shared template url
     */
    async getSharedTemplateUrlRaw(requestParameters: GetSharedTemplateUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSharedTemplateUrl>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getSharedTemplateUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/{campaignId}/sharedUrl`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSharedTemplateUrlFromJSON(jsonValue));
    }

    /**
     * Get a unique URL to share & import an email template from one Sendinblue account to another.
     * Get a shared template url
     */
    async getSharedTemplateUrl(requestParameters: GetSharedTemplateUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSharedTemplateUrl> {
        const response = await this.getSharedTemplateUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send an email campaign immediately, based on campaignId
     */
    async sendEmailCampaignNowRaw(requestParameters: SendEmailCampaignNowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling sendEmailCampaignNow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/{campaignId}/sendNow`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send an email campaign immediately, based on campaignId
     */
    async sendEmailCampaignNow(requestParameters: SendEmailCampaignNowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendEmailCampaignNowRaw(requestParameters, initOverrides);
    }

    /**
     * A PDF will be sent to the specified email addresses
     * Send the report of a campaign
     */
    async sendReportRaw(requestParameters: SendReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling sendReport.');
        }

        if (requestParameters.sendReport === null || requestParameters.sendReport === undefined) {
            throw new runtime.RequiredError('sendReport','Required parameter requestParameters.sendReport was null or undefined when calling sendReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/{campaignId}/sendReport`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendReportToJSON(requestParameters.sendReport),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A PDF will be sent to the specified email addresses
     * Send the report of a campaign
     */
    async sendReport(requestParameters: SendReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendReportRaw(requestParameters, initOverrides);
    }

    /**
     * Send an email campaign to your test list
     */
    async sendTestEmailRaw(requestParameters: SendTestEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling sendTestEmail.');
        }

        if (requestParameters.emailTo === null || requestParameters.emailTo === undefined) {
            throw new runtime.RequiredError('emailTo','Required parameter requestParameters.emailTo was null or undefined when calling sendTestEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/{campaignId}/sendTest`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendTestEmailToJSON(requestParameters.emailTo),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send an email campaign to your test list
     */
    async sendTestEmail(requestParameters: SendTestEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendTestEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Update an email campaign status
     */
    async updateCampaignStatusRaw(requestParameters: UpdateCampaignStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling updateCampaignStatus.');
        }

        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling updateCampaignStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/{campaignId}/status`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCampaignStatusToJSON(requestParameters.status),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an email campaign status
     */
    async updateCampaignStatus(requestParameters: UpdateCampaignStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCampaignStatusRaw(requestParameters, initOverrides);
    }

    /**
     * Update an email campaign
     */
    async updateEmailCampaignRaw(requestParameters: UpdateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling updateEmailCampaign.');
        }

        if (requestParameters.emailCampaign === null || requestParameters.emailCampaign === undefined) {
            throw new runtime.RequiredError('emailCampaign','Required parameter requestParameters.emailCampaign was null or undefined when calling updateEmailCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/{campaignId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEmailCampaignToJSON(requestParameters.emailCampaign),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an email campaign
     */
    async updateEmailCampaign(requestParameters: UpdateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateEmailCampaignRaw(requestParameters, initOverrides);
    }

    /**
     * Upload an image to your account\'s image gallery
     */
    async uploadImageToGalleryRaw(requestParameters: UploadImageToGalleryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uploadImage === null || requestParameters.uploadImage === undefined) {
            throw new runtime.RequiredError('uploadImage','Required parameter requestParameters.uploadImage was null or undefined when calling uploadImageToGallery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // api-key authentication
        }

        const response = await this.request({
            path: `/emailCampaigns/images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadImageToGalleryToJSON(requestParameters.uploadImage),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload an image to your account\'s image gallery
     */
    async uploadImageToGallery(requestParameters: UploadImageToGalleryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadImageToGalleryRaw(requestParameters, initOverrides);
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetEmailCampaignStatisticsEnum {
    GlobalStats = 'globalStats',
    LinksStats = 'linksStats',
    StatsByDomain = 'statsByDomain',
    StatsByDevice = 'statsByDevice',
    StatsByBrowser = 'statsByBrowser'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEmailCampaignsTypeEnum {
    Classic = 'classic',
    Trigger = 'trigger'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEmailCampaignsStatusEnum {
    Suspended = 'suspended',
    Archive = 'archive',
    Sent = 'sent',
    Queued = 'queued',
    Draft = 'draft',
    InProcess = 'inProcess'
}
/**
  * @export
  * @enum {string}
  */
export enum GetEmailCampaignsStatisticsEnum {
    GlobalStats = 'globalStats',
    LinksStats = 'linksStats',
    StatsByDomain = 'statsByDomain'
}
