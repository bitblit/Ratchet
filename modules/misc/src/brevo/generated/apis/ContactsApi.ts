/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime.js';
import type {
  AddContactToList,
  CreateAttribute,
  CreateContact,
  CreateDoiContact,
  CreatedProcessId,
  CreateList,
  CreateModel,
  CreateUpdateContactModel,
  CreateUpdateFolder,
  GetAttributes,
  GetContactCampaignStats,
  GetContacts,
  GetExtendedContactDetails,
  GetExtendedList,
  GetFolder,
  GetFolderLists,
  GetFolders,
  GetLists,
  GetSegments,
  PostContactInfo,
  RemoveContactFromList,
  RequestContactExport,
  RequestContactImport,
  UpdateAttribute,
  UpdateContact,
  UpdateList,
} from '../models/index.js';
import {
  AddContactToListToJSON,
  CreateAttributeToJSON,
  CreateContactToJSON,
  CreateDoiContactToJSON,
  CreatedProcessIdFromJSON,
  CreateListToJSON,
  CreateModelFromJSON,
  CreateUpdateContactModelFromJSON,
  CreateUpdateFolderToJSON,
  GetAttributesFromJSON,
  GetContactCampaignStatsFromJSON,
  GetContactsFromJSON,
  GetExtendedContactDetailsFromJSON,
  GetExtendedListFromJSON,
  GetFolderFromJSON,
  GetFolderListsFromJSON,
  GetFoldersFromJSON,
  GetListsFromJSON,
  GetSegmentsFromJSON,
  PostContactInfoFromJSON,
  RemoveContactFromListToJSON,
  RequestContactExportToJSON,
  RequestContactImportToJSON,
  UpdateAttributeToJSON,
  UpdateContactToJSON,
  UpdateListToJSON,
} from '../models/index.js';

export interface AddContactToListRequest {
  listId: number;
  contactEmails: AddContactToList;
}

export interface CreateAttributeRequest {
  attributeCategory: CreateAttributeAttributeCategoryEnum;
  attributeName: string;
  createAttribute: CreateAttribute;
}

export interface CreateContactRequest {
  createContact: CreateContact;
}

export interface CreateDoiContactRequest {
  createDoiContact: CreateDoiContact;
}

export interface CreateFolderRequest {
  createFolder: CreateUpdateFolder;
}

export interface CreateListRequest {
  createList: CreateList;
}

export interface DeleteAttributeRequest {
  attributeCategory: DeleteAttributeAttributeCategoryEnum;
  attributeName: string;
}

export interface DeleteContactRequest {
  email: string;
}

export interface DeleteFolderRequest {
  folderId: number;
}

export interface DeleteListRequest {
  listId: number;
}

export interface GetContactInfoRequest {
  email: string;
}

export interface GetContactStatsRequest {
  email: string;
  startDate?: Date;
  endDate?: Date;
}

export interface GetContactsRequest {
  limit?: number;
  offset?: number;
  modifiedSince?: Date;
  createdSince?: Date;
  sort?: GetContactsSortEnum;
}

export interface GetContactsFromListRequest {
  listId: number;
  modifiedSince?: Date;
  limit?: number;
  offset?: number;
  sort?: GetContactsFromListSortEnum;
}

export interface GetFolderRequest {
  folderId: number;
}

export interface GetFolderListsRequest {
  folderId: number;
  limit?: number;
  offset?: number;
  sort?: GetFolderListsSortEnum;
}

export interface GetFoldersRequest {
  limit: number;
  offset: number;
  sort?: GetFoldersSortEnum;
}

export interface GetListRequest {
  listId: number;
}

export interface GetListsRequest {
  limit?: number;
  offset?: number;
  sort?: GetListsSortEnum;
}

export interface GetSegmentsRequest {
  limit: number;
  offset: number;
  sort?: GetSegmentsSortEnum;
}

export interface ImportContactsRequest {
  requestContactImport: RequestContactImport;
}

export interface RemoveContactFromListRequest {
  listId: number;
  contactEmails: RemoveContactFromList;
}

export interface RequestContactExportRequest {
  requestContactExport: RequestContactExport;
}

export interface UpdateAttributeRequest {
  attributeCategory: UpdateAttributeAttributeCategoryEnum;
  attributeName: string;
  updateAttribute: UpdateAttribute;
}

export interface UpdateContactRequest {
  email: string;
  updateContact: UpdateContact;
}

export interface UpdateFolderRequest {
  folderId: number;
  updateFolder: CreateUpdateFolder;
}

export interface UpdateListRequest {
  listId: number;
  updateList: UpdateList;
}

/**
 * ContactsApi - interface
 *
 * @export
 * @interface ContactsApiInterface
 */
export interface ContactsApiInterface {
  /**
   *
   * @summary Add existing contacts to a list
   * @param {number} listId Id of the list
   * @param {AddContactToList} contactEmails Emails addresses of the contacts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  addContactToListRaw(
    requestParameters: AddContactToListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostContactInfo>>;

  /**
   * Add existing contacts to a list
   */
  addContactToList(
    requestParameters: AddContactToListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostContactInfo>;

  /**
   *
   * @summary Create contact attribute
   * @param {'normal' | 'transactional' | 'category' | 'calculated' | 'global'} attributeCategory Category of the attribute
   * @param {string} attributeName Name of the attribute
   * @param {CreateAttribute} createAttribute Values to create an attribute
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  createAttributeRaw(
    requestParameters: CreateAttributeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Create contact attribute
   */
  createAttribute(requestParameters: CreateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Create a contact
   * @param {CreateContact} createContact Values to create a contact
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  createContactRaw(
    requestParameters: CreateContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateUpdateContactModel>>;

  /**
   * Create a contact
   */
  createContact(
    requestParameters: CreateContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateUpdateContactModel>;

  /**
   *
   * @summary Create Contact via DOI (Double-Opt-In) Flow
   * @param {CreateDoiContact} createDoiContact Values to create the Double opt-in (DOI) contact
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  createDoiContactRaw(
    requestParameters: CreateDoiContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Create Contact via DOI (Double-Opt-In) Flow
   */
  createDoiContact(requestParameters: CreateDoiContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Create a folder
   * @param {CreateUpdateFolder} createFolder Name of the folder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  createFolderRaw(
    requestParameters: CreateFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateModel>>;

  /**
   * Create a folder
   */
  createFolder(requestParameters: CreateFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateModel>;

  /**
   *
   * @summary Create a list
   * @param {CreateList} createList Values to create a list
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  createListRaw(
    requestParameters: CreateListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateModel>>;

  /**
   * Create a list
   */
  createList(requestParameters: CreateListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateModel>;

  /**
   *
   * @summary Delete an attribute
   * @param {'normal' | 'transactional' | 'category' | 'calculated' | 'global'} attributeCategory Category of the attribute
   * @param {string} attributeName Name of the existing attribute
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  deleteAttributeRaw(
    requestParameters: DeleteAttributeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Delete an attribute
   */
  deleteAttribute(requestParameters: DeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Delete a contact
   * @param {string} email Email (urlencoded) of the contact
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  deleteContactRaw(
    requestParameters: DeleteContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Delete a contact
   */
  deleteContact(requestParameters: DeleteContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Delete a folder (and all its lists)
   * @param {number} folderId Id of the folder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  deleteFolderRaw(
    requestParameters: DeleteFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Delete a folder (and all its lists)
   */
  deleteFolder(requestParameters: DeleteFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Delete a list
   * @param {number} listId Id of the list
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  deleteListRaw(
    requestParameters: DeleteListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Delete a list
   */
  deleteList(requestParameters: DeleteListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary List all attributes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getAttributesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttributes>>;

  /**
   * List all attributes
   */
  getAttributes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttributes>;

  /**
   *
   * @summary Get a contact\'s details
   * @param {string} email Email (urlencoded) of the contact OR its SMS attribute value
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getContactInfoRaw(
    requestParameters: GetContactInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetExtendedContactDetails>>;

  /**
   * Get a contact\'s details
   */
  getContactInfo(
    requestParameters: GetContactInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetExtendedContactDetails>;

  /**
   *
   * @summary Get email campaigns\' statistics for a contact
   * @param {string} email Email address (urlencoded) of the contact
   * @param {Date} [startDate] Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate
   * @param {Date} [endDate] Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getContactStatsRaw(
    requestParameters: GetContactStatsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetContactCampaignStats>>;

  /**
   * Get email campaigns\' statistics for a contact
   */
  getContactStats(
    requestParameters: GetContactStatsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetContactCampaignStats>;

  /**
   *
   * @summary Get all the contacts
   * @param {number} [limit] Number of documents per page
   * @param {number} [offset] Index of the first document of the page
   * @param {Date} [modifiedSince] Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
   * @param {Date} [createdSince] Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
   * @param {'asc' | 'desc'} [sort] Sort the results in the ascending/descending order of record creation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getContactsRaw(
    requestParameters: GetContactsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetContacts>>;

  /**
   * Get all the contacts
   */
  getContacts(requestParameters: GetContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContacts>;

  /**
   *
   * @summary Get contacts in a list
   * @param {number} listId Id of the list
   * @param {Date} [modifiedSince] Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
   * @param {number} [limit] Number of documents per page
   * @param {number} [offset] Index of the first document of the page
   * @param {'asc' | 'desc'} [sort] Sort the results in the ascending/descending order of record creation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getContactsFromListRaw(
    requestParameters: GetContactsFromListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetContacts>>;

  /**
   * Get contacts in a list
   */
  getContactsFromList(
    requestParameters: GetContactsFromListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetContacts>;

  /**
   *
   * @summary Returns a folder\'s details
   * @param {number} folderId id of the folder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getFolderRaw(
    requestParameters: GetFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetFolder>>;

  /**
   * Returns a folder\'s details
   */
  getFolder(requestParameters: GetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFolder>;

  /**
   *
   * @summary Get lists in a folder
   * @param {number} folderId Id of the folder
   * @param {number} [limit] Number of documents per page
   * @param {number} [offset] Index of the first document of the page
   * @param {'asc' | 'desc'} [sort] Sort the results in the ascending/descending order of record creation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getFolderListsRaw(
    requestParameters: GetFolderListsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetFolderLists>>;

  /**
   * Get lists in a folder
   */
  getFolderLists(
    requestParameters: GetFolderListsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetFolderLists>;

  /**
   *
   * @summary Get all folders
   * @param {number} limit Number of documents per page
   * @param {number} offset Index of the first document of the page
   * @param {'asc' | 'desc'} [sort] Sort the results in the ascending/descending order of record creation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getFoldersRaw(
    requestParameters: GetFoldersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetFolders>>;

  /**
   * Get all folders
   */
  getFolders(requestParameters: GetFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFolders>;

  /**
   *
   * @summary Get a list\'s details
   * @param {number} listId Id of the list
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getListRaw(
    requestParameters: GetListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetExtendedList>>;

  /**
   * Get a list\'s details
   */
  getList(requestParameters: GetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExtendedList>;

  /**
   *
   * @summary Get all the lists
   * @param {number} [limit] Number of documents per page
   * @param {number} [offset] Index of the first document of the page
   * @param {'asc' | 'desc'} [sort] Sort the results in the ascending/descending order of record creation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getListsRaw(
    requestParameters: GetListsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetLists>>;

  /**
   * Get all the lists
   */
  getLists(requestParameters: GetListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLists>;

  /**
   *
   * @summary Get all the segments
   * @param {number} limit Number of documents per page
   * @param {number} offset Index of the first document of the page
   * @param {'asc' | 'desc'} [sort] Sort the results in the ascending/descending order of record creation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  getSegmentsRaw(
    requestParameters: GetSegmentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSegments>>;

  /**
   * Get all the segments
   */
  getSegments(requestParameters: GetSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSegments>;

  /**
   * It returns the background process ID which on completion calls the notify URL that you have set in the input.
   * @summary Import contacts
   * @param {RequestContactImport} requestContactImport Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  importContactsRaw(
    requestParameters: ImportContactsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatedProcessId>>;

  /**
   * It returns the background process ID which on completion calls the notify URL that you have set in the input.
   * Import contacts
   */
  importContacts(
    requestParameters: ImportContactsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatedProcessId>;

  /**
   *
   * @summary Delete a contact from a list
   * @param {number} listId Id of the list
   * @param {RemoveContactFromList} contactEmails Emails adresses of the contact
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  removeContactFromListRaw(
    requestParameters: RemoveContactFromListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostContactInfo>>;

  /**
   * Delete a contact from a list
   */
  removeContactFromList(
    requestParameters: RemoveContactFromListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostContactInfo>;

  /**
   * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
   * @summary Export contacts
   * @param {RequestContactExport} requestContactExport Values to request a contact export
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  requestContactExportRaw(
    requestParameters: RequestContactExportRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatedProcessId>>;

  /**
   * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
   * Export contacts
   */
  requestContactExport(
    requestParameters: RequestContactExportRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatedProcessId>;

  /**
   *
   * @summary Update contact attribute
   * @param {'category' | 'calculated' | 'global'} attributeCategory Category of the attribute
   * @param {string} attributeName Name of the existing attribute
   * @param {UpdateAttribute} updateAttribute Values to update an attribute
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  updateAttributeRaw(
    requestParameters: UpdateAttributeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Update contact attribute
   */
  updateAttribute(requestParameters: UpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Update a contact
   * @param {string} email Email (urlencoded) of the contact
   * @param {UpdateContact} updateContact Values to update a contact
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  updateContactRaw(
    requestParameters: UpdateContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Update a contact
   */
  updateContact(requestParameters: UpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Update a folder
   * @param {number} folderId Id of the folder
   * @param {CreateUpdateFolder} updateFolder Name of the folder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  updateFolderRaw(
    requestParameters: UpdateFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Update a folder
   */
  updateFolder(requestParameters: UpdateFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

  /**
   *
   * @summary Update a list
   * @param {number} listId Id of the list
   * @param {UpdateList} updateList Values to update a list
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsApiInterface
   */
  updateListRaw(
    requestParameters: UpdateListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Update a list
   */
  updateList(requestParameters: UpdateListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}

/**
 *
 */
export class ContactsApi extends runtime.BaseAPI implements ContactsApiInterface {
  /**
   * Add existing contacts to a list
   */
  async addContactToListRaw(
    requestParameters: AddContactToListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostContactInfo>> {
    if (requestParameters.listId === null || requestParameters.listId === undefined) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter requestParameters.listId was null or undefined when calling addContactToList.',
      );
    }

    if (requestParameters.contactEmails === null || requestParameters.contactEmails === undefined) {
      throw new runtime.RequiredError(
        'contactEmails',
        'Required parameter requestParameters.contactEmails was null or undefined when calling addContactToList.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/lists/{listId}/contacts/add`.replace(`{${'listId'}}`, encodeURIComponent(String(requestParameters.listId))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AddContactToListToJSON(requestParameters.contactEmails),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PostContactInfoFromJSON(jsonValue));
  }

  /**
   * Add existing contacts to a list
   */
  async addContactToList(
    requestParameters: AddContactToListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostContactInfo> {
    const response = await this.addContactToListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create contact attribute
   */
  async createAttributeRaw(
    requestParameters: CreateAttributeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.attributeCategory === null || requestParameters.attributeCategory === undefined) {
      throw new runtime.RequiredError(
        'attributeCategory',
        'Required parameter requestParameters.attributeCategory was null or undefined when calling createAttribute.',
      );
    }

    if (requestParameters.attributeName === null || requestParameters.attributeName === undefined) {
      throw new runtime.RequiredError(
        'attributeName',
        'Required parameter requestParameters.attributeName was null or undefined when calling createAttribute.',
      );
    }

    if (requestParameters.createAttribute === null || requestParameters.createAttribute === undefined) {
      throw new runtime.RequiredError(
        'createAttribute',
        'Required parameter requestParameters.createAttribute was null or undefined when calling createAttribute.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/attributes/{attributeCategory}/{attributeName}`
          .replace(`{${'attributeCategory'}}`, encodeURIComponent(String(requestParameters.attributeCategory)))
          .replace(`{${'attributeName'}}`, encodeURIComponent(String(requestParameters.attributeName))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateAttributeToJSON(requestParameters.createAttribute),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create contact attribute
   */
  async createAttribute(
    requestParameters: CreateAttributeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.createAttributeRaw(requestParameters, initOverrides);
  }

  /**
   * Create a contact
   */
  async createContactRaw(
    requestParameters: CreateContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateUpdateContactModel>> {
    if (requestParameters.createContact === null || requestParameters.createContact === undefined) {
      throw new runtime.RequiredError(
        'createContact',
        'Required parameter requestParameters.createContact was null or undefined when calling createContact.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateContactToJSON(requestParameters.createContact),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CreateUpdateContactModelFromJSON(jsonValue));
  }

  /**
   * Create a contact
   */
  async createContact(
    requestParameters: CreateContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateUpdateContactModel> {
    const response = await this.createContactRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create Contact via DOI (Double-Opt-In) Flow
   */
  async createDoiContactRaw(
    requestParameters: CreateDoiContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.createDoiContact === null || requestParameters.createDoiContact === undefined) {
      throw new runtime.RequiredError(
        'createDoiContact',
        'Required parameter requestParameters.createDoiContact was null or undefined when calling createDoiContact.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/doubleOptinConfirmation`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateDoiContactToJSON(requestParameters.createDoiContact),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create Contact via DOI (Double-Opt-In) Flow
   */
  async createDoiContact(
    requestParameters: CreateDoiContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.createDoiContactRaw(requestParameters, initOverrides);
  }

  /**
   * Create a folder
   */
  async createFolderRaw(
    requestParameters: CreateFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateModel>> {
    if (requestParameters.createFolder === null || requestParameters.createFolder === undefined) {
      throw new runtime.RequiredError(
        'createFolder',
        'Required parameter requestParameters.createFolder was null or undefined when calling createFolder.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/folders`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateUpdateFolderToJSON(requestParameters.createFolder),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CreateModelFromJSON(jsonValue));
  }

  /**
   * Create a folder
   */
  async createFolder(
    requestParameters: CreateFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateModel> {
    const response = await this.createFolderRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create a list
   */
  async createListRaw(
    requestParameters: CreateListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateModel>> {
    if (requestParameters.createList === null || requestParameters.createList === undefined) {
      throw new runtime.RequiredError(
        'createList',
        'Required parameter requestParameters.createList was null or undefined when calling createList.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/lists`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateListToJSON(requestParameters.createList),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CreateModelFromJSON(jsonValue));
  }

  /**
   * Create a list
   */
  async createList(requestParameters: CreateListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateModel> {
    const response = await this.createListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete an attribute
   */
  async deleteAttributeRaw(
    requestParameters: DeleteAttributeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.attributeCategory === null || requestParameters.attributeCategory === undefined) {
      throw new runtime.RequiredError(
        'attributeCategory',
        'Required parameter requestParameters.attributeCategory was null or undefined when calling deleteAttribute.',
      );
    }

    if (requestParameters.attributeName === null || requestParameters.attributeName === undefined) {
      throw new runtime.RequiredError(
        'attributeName',
        'Required parameter requestParameters.attributeName was null or undefined when calling deleteAttribute.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/attributes/{attributeCategory}/{attributeName}`
          .replace(`{${'attributeCategory'}}`, encodeURIComponent(String(requestParameters.attributeCategory)))
          .replace(`{${'attributeName'}}`, encodeURIComponent(String(requestParameters.attributeName))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete an attribute
   */
  async deleteAttribute(
    requestParameters: DeleteAttributeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteAttributeRaw(requestParameters, initOverrides);
  }

  /**
   * Delete a contact
   */
  async deleteContactRaw(
    requestParameters: DeleteContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.email === null || requestParameters.email === undefined) {
      throw new runtime.RequiredError(
        'email',
        'Required parameter requestParameters.email was null or undefined when calling deleteContact.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/{email}`.replace(`{${'email'}}`, encodeURIComponent(String(requestParameters.email))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a contact
   */
  async deleteContact(requestParameters: DeleteContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
    await this.deleteContactRaw(requestParameters, initOverrides);
  }

  /**
   * Delete a folder (and all its lists)
   */
  async deleteFolderRaw(
    requestParameters: DeleteFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
      throw new runtime.RequiredError(
        'folderId',
        'Required parameter requestParameters.folderId was null or undefined when calling deleteFolder.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/folders/{folderId}`.replace(`{${'folderId'}}`, encodeURIComponent(String(requestParameters.folderId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a folder (and all its lists)
   */
  async deleteFolder(requestParameters: DeleteFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
    await this.deleteFolderRaw(requestParameters, initOverrides);
  }

  /**
   * Delete a list
   */
  async deleteListRaw(
    requestParameters: DeleteListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.listId === null || requestParameters.listId === undefined) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter requestParameters.listId was null or undefined when calling deleteList.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/lists/{listId}`.replace(`{${'listId'}}`, encodeURIComponent(String(requestParameters.listId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a list
   */
  async deleteList(requestParameters: DeleteListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
    await this.deleteListRaw(requestParameters, initOverrides);
  }

  /**
   * List all attributes
   */
  async getAttributesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttributes>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/attributes`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetAttributesFromJSON(jsonValue));
  }

  /**
   * List all attributes
   */
  async getAttributes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttributes> {
    const response = await this.getAttributesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a contact\'s details
   */
  async getContactInfoRaw(
    requestParameters: GetContactInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetExtendedContactDetails>> {
    if (requestParameters.email === null || requestParameters.email === undefined) {
      throw new runtime.RequiredError(
        'email',
        'Required parameter requestParameters.email was null or undefined when calling getContactInfo.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/{email}`.replace(`{${'email'}}`, encodeURIComponent(String(requestParameters.email))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetExtendedContactDetailsFromJSON(jsonValue));
  }

  /**
   * Get a contact\'s details
   */
  async getContactInfo(
    requestParameters: GetContactInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetExtendedContactDetails> {
    const response = await this.getContactInfoRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get email campaigns\' statistics for a contact
   */
  async getContactStatsRaw(
    requestParameters: GetContactStatsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetContactCampaignStats>> {
    if (requestParameters.email === null || requestParameters.email === undefined) {
      throw new runtime.RequiredError(
        'email',
        'Required parameter requestParameters.email was null or undefined when calling getContactStats.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.startDate !== undefined) {
      queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0, 10);
    }

    if (requestParameters.endDate !== undefined) {
      queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/{email}/campaignStats`.replace(`{${'email'}}`, encodeURIComponent(String(requestParameters.email))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetContactCampaignStatsFromJSON(jsonValue));
  }

  /**
   * Get email campaigns\' statistics for a contact
   */
  async getContactStats(
    requestParameters: GetContactStatsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetContactCampaignStats> {
    const response = await this.getContactStatsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all the contacts
   */
  async getContactsRaw(
    requestParameters: GetContactsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetContacts>> {
    const queryParameters: any = {};

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.modifiedSince !== undefined) {
      queryParameters['modifiedSince'] = (requestParameters.modifiedSince as any).toISOString();
    }

    if (requestParameters.createdSince !== undefined) {
      queryParameters['createdSince'] = (requestParameters.createdSince as any).toISOString();
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetContactsFromJSON(jsonValue));
  }

  /**
   * Get all the contacts
   */
  async getContacts(
    requestParameters: GetContactsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetContacts> {
    const response = await this.getContactsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get contacts in a list
   */
  async getContactsFromListRaw(
    requestParameters: GetContactsFromListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetContacts>> {
    if (requestParameters.listId === null || requestParameters.listId === undefined) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter requestParameters.listId was null or undefined when calling getContactsFromList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.modifiedSince !== undefined) {
      queryParameters['modifiedSince'] = (requestParameters.modifiedSince as any).toISOString();
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/lists/{listId}/contacts`.replace(`{${'listId'}}`, encodeURIComponent(String(requestParameters.listId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetContactsFromJSON(jsonValue));
  }

  /**
   * Get contacts in a list
   */
  async getContactsFromList(
    requestParameters: GetContactsFromListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetContacts> {
    const response = await this.getContactsFromListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Returns a folder\'s details
   */
  async getFolderRaw(
    requestParameters: GetFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetFolder>> {
    if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
      throw new runtime.RequiredError(
        'folderId',
        'Required parameter requestParameters.folderId was null or undefined when calling getFolder.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/folders/{folderId}`.replace(`{${'folderId'}}`, encodeURIComponent(String(requestParameters.folderId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetFolderFromJSON(jsonValue));
  }

  /**
   * Returns a folder\'s details
   */
  async getFolder(requestParameters: GetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFolder> {
    const response = await this.getFolderRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get lists in a folder
   */
  async getFolderListsRaw(
    requestParameters: GetFolderListsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetFolderLists>> {
    if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
      throw new runtime.RequiredError(
        'folderId',
        'Required parameter requestParameters.folderId was null or undefined when calling getFolderLists.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/folders/{folderId}/lists`.replace(`{${'folderId'}}`, encodeURIComponent(String(requestParameters.folderId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetFolderListsFromJSON(jsonValue));
  }

  /**
   * Get lists in a folder
   */
  async getFolderLists(
    requestParameters: GetFolderListsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetFolderLists> {
    const response = await this.getFolderListsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all folders
   */
  async getFoldersRaw(
    requestParameters: GetFoldersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetFolders>> {
    if (requestParameters.limit === null || requestParameters.limit === undefined) {
      throw new runtime.RequiredError('limit', 'Required parameter requestParameters.limit was null or undefined when calling getFolders.');
    }

    if (requestParameters.offset === null || requestParameters.offset === undefined) {
      throw new runtime.RequiredError(
        'offset',
        'Required parameter requestParameters.offset was null or undefined when calling getFolders.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/folders`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetFoldersFromJSON(jsonValue));
  }

  /**
   * Get all folders
   */
  async getFolders(requestParameters: GetFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFolders> {
    const response = await this.getFoldersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get a list\'s details
   */
  async getListRaw(
    requestParameters: GetListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetExtendedList>> {
    if (requestParameters.listId === null || requestParameters.listId === undefined) {
      throw new runtime.RequiredError('listId', 'Required parameter requestParameters.listId was null or undefined when calling getList.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/lists/{listId}`.replace(`{${'listId'}}`, encodeURIComponent(String(requestParameters.listId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetExtendedListFromJSON(jsonValue));
  }

  /**
   * Get a list\'s details
   */
  async getList(requestParameters: GetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExtendedList> {
    const response = await this.getListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all the lists
   */
  async getListsRaw(
    requestParameters: GetListsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetLists>> {
    const queryParameters: any = {};

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/lists`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetListsFromJSON(jsonValue));
  }

  /**
   * Get all the lists
   */
  async getLists(requestParameters: GetListsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLists> {
    const response = await this.getListsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all the segments
   */
  async getSegmentsRaw(
    requestParameters: GetSegmentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSegments>> {
    if (requestParameters.limit === null || requestParameters.limit === undefined) {
      throw new runtime.RequiredError(
        'limit',
        'Required parameter requestParameters.limit was null or undefined when calling getSegments.',
      );
    }

    if (requestParameters.offset === null || requestParameters.offset === undefined) {
      throw new runtime.RequiredError(
        'offset',
        'Required parameter requestParameters.offset was null or undefined when calling getSegments.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset;
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/segments`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetSegmentsFromJSON(jsonValue));
  }

  /**
   * Get all the segments
   */
  async getSegments(
    requestParameters: GetSegmentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetSegments> {
    const response = await this.getSegmentsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * It returns the background process ID which on completion calls the notify URL that you have set in the input.
   * Import contacts
   */
  async importContactsRaw(
    requestParameters: ImportContactsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatedProcessId>> {
    if (requestParameters.requestContactImport === null || requestParameters.requestContactImport === undefined) {
      throw new runtime.RequiredError(
        'requestContactImport',
        'Required parameter requestParameters.requestContactImport was null or undefined when calling importContacts.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/import`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RequestContactImportToJSON(requestParameters.requestContactImport),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CreatedProcessIdFromJSON(jsonValue));
  }

  /**
   * It returns the background process ID which on completion calls the notify URL that you have set in the input.
   * Import contacts
   */
  async importContacts(
    requestParameters: ImportContactsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatedProcessId> {
    const response = await this.importContactsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete a contact from a list
   */
  async removeContactFromListRaw(
    requestParameters: RemoveContactFromListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostContactInfo>> {
    if (requestParameters.listId === null || requestParameters.listId === undefined) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter requestParameters.listId was null or undefined when calling removeContactFromList.',
      );
    }

    if (requestParameters.contactEmails === null || requestParameters.contactEmails === undefined) {
      throw new runtime.RequiredError(
        'contactEmails',
        'Required parameter requestParameters.contactEmails was null or undefined when calling removeContactFromList.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/lists/{listId}/contacts/remove`.replace(`{${'listId'}}`, encodeURIComponent(String(requestParameters.listId))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RemoveContactFromListToJSON(requestParameters.contactEmails),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PostContactInfoFromJSON(jsonValue));
  }

  /**
   * Delete a contact from a list
   */
  async removeContactFromList(
    requestParameters: RemoveContactFromListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostContactInfo> {
    const response = await this.removeContactFromListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
   * Export contacts
   */
  async requestContactExportRaw(
    requestParameters: RequestContactExportRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatedProcessId>> {
    if (requestParameters.requestContactExport === null || requestParameters.requestContactExport === undefined) {
      throw new runtime.RequiredError(
        'requestContactExport',
        'Required parameter requestParameters.requestContactExport was null or undefined when calling requestContactExport.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/export`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RequestContactExportToJSON(requestParameters.requestContactExport),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CreatedProcessIdFromJSON(jsonValue));
  }

  /**
   * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
   * Export contacts
   */
  async requestContactExport(
    requestParameters: RequestContactExportRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatedProcessId> {
    const response = await this.requestContactExportRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update contact attribute
   */
  async updateAttributeRaw(
    requestParameters: UpdateAttributeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.attributeCategory === null || requestParameters.attributeCategory === undefined) {
      throw new runtime.RequiredError(
        'attributeCategory',
        'Required parameter requestParameters.attributeCategory was null or undefined when calling updateAttribute.',
      );
    }

    if (requestParameters.attributeName === null || requestParameters.attributeName === undefined) {
      throw new runtime.RequiredError(
        'attributeName',
        'Required parameter requestParameters.attributeName was null or undefined when calling updateAttribute.',
      );
    }

    if (requestParameters.updateAttribute === null || requestParameters.updateAttribute === undefined) {
      throw new runtime.RequiredError(
        'updateAttribute',
        'Required parameter requestParameters.updateAttribute was null or undefined when calling updateAttribute.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/attributes/{attributeCategory}/{attributeName}`
          .replace(`{${'attributeCategory'}}`, encodeURIComponent(String(requestParameters.attributeCategory)))
          .replace(`{${'attributeName'}}`, encodeURIComponent(String(requestParameters.attributeName))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateAttributeToJSON(requestParameters.updateAttribute),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update contact attribute
   */
  async updateAttribute(
    requestParameters: UpdateAttributeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateAttributeRaw(requestParameters, initOverrides);
  }

  /**
   * Update a contact
   */
  async updateContactRaw(
    requestParameters: UpdateContactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.email === null || requestParameters.email === undefined) {
      throw new runtime.RequiredError(
        'email',
        'Required parameter requestParameters.email was null or undefined when calling updateContact.',
      );
    }

    if (requestParameters.updateContact === null || requestParameters.updateContact === undefined) {
      throw new runtime.RequiredError(
        'updateContact',
        'Required parameter requestParameters.updateContact was null or undefined when calling updateContact.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/{email}`.replace(`{${'email'}}`, encodeURIComponent(String(requestParameters.email))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateContactToJSON(requestParameters.updateContact),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a contact
   */
  async updateContact(requestParameters: UpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
    await this.updateContactRaw(requestParameters, initOverrides);
  }

  /**
   * Update a folder
   */
  async updateFolderRaw(
    requestParameters: UpdateFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
      throw new runtime.RequiredError(
        'folderId',
        'Required parameter requestParameters.folderId was null or undefined when calling updateFolder.',
      );
    }

    if (requestParameters.updateFolder === null || requestParameters.updateFolder === undefined) {
      throw new runtime.RequiredError(
        'updateFolder',
        'Required parameter requestParameters.updateFolder was null or undefined when calling updateFolder.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/folders/{folderId}`.replace(`{${'folderId'}}`, encodeURIComponent(String(requestParameters.folderId))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CreateUpdateFolderToJSON(requestParameters.updateFolder),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a folder
   */
  async updateFolder(requestParameters: UpdateFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
    await this.updateFolderRaw(requestParameters, initOverrides);
  }

  /**
   * Update a list
   */
  async updateListRaw(
    requestParameters: UpdateListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.listId === null || requestParameters.listId === undefined) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter requestParameters.listId was null or undefined when calling updateList.',
      );
    }

    if (requestParameters.updateList === null || requestParameters.updateList === undefined) {
      throw new runtime.RequiredError(
        'updateList',
        'Required parameter requestParameters.updateList was null or undefined when calling updateList.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['api-key'] = await this.configuration.apiKey('api-key'); // api-key authentication
    }

    const response = await this.request(
      {
        path: `/contacts/lists/{listId}`.replace(`{${'listId'}}`, encodeURIComponent(String(requestParameters.listId))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateListToJSON(requestParameters.updateList),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a list
   */
  async updateList(requestParameters: UpdateListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
    await this.updateListRaw(requestParameters, initOverrides);
  }
}

/**
 * @export
 * @enum {string}
 */
export enum CreateAttributeAttributeCategoryEnum {
  Normal = 'normal',
  Transactional = 'transactional',
  Category = 'category',
  Calculated = 'calculated',
  Global = 'global',
}
/**
 * @export
 * @enum {string}
 */
export enum DeleteAttributeAttributeCategoryEnum {
  Normal = 'normal',
  Transactional = 'transactional',
  Category = 'category',
  Calculated = 'calculated',
  Global = 'global',
}
/**
 * @export
 * @enum {string}
 */
export enum GetContactsSortEnum {
  Asc = 'asc',
  Desc = 'desc',
}
/**
 * @export
 * @enum {string}
 */
export enum GetContactsFromListSortEnum {
  Asc = 'asc',
  Desc = 'desc',
}
/**
 * @export
 * @enum {string}
 */
export enum GetFolderListsSortEnum {
  Asc = 'asc',
  Desc = 'desc',
}
/**
 * @export
 * @enum {string}
 */
export enum GetFoldersSortEnum {
  Asc = 'asc',
  Desc = 'desc',
}
/**
 * @export
 * @enum {string}
 */
export enum GetListsSortEnum {
  Asc = 'asc',
  Desc = 'desc',
}
/**
 * @export
 * @enum {string}
 */
export enum GetSegmentsSortEnum {
  Asc = 'asc',
  Desc = 'desc',
}
/**
 * @export
 * @enum {string}
 */
export enum UpdateAttributeAttributeCategoryEnum {
  Category = 'category',
  Calculated = 'calculated',
  Global = 'global',
}
