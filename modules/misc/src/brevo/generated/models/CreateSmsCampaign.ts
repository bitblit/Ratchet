/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime.js';
import type { CreateSmsCampaignRecipients } from './CreateSmsCampaignRecipients.js';
import { CreateSmsCampaignRecipientsFromJSON, CreateSmsCampaignRecipientsToJSON } from './CreateSmsCampaignRecipients.js';

/**
 *
 * @export
 * @interface CreateSmsCampaign
 */
export interface CreateSmsCampaign {
  /**
   * Name of the campaign
   * @type {string}
   * @memberof CreateSmsCampaign
   */
  name: string;
  /**
   * Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
   * @type {string}
   * @memberof CreateSmsCampaign
   */
  sender: string;
  /**
   * Content of the message. The maximum characters used per SMS is 160, if used more than that, it will be counted as more than one SMS
   * @type {string}
   * @memberof CreateSmsCampaign
   */
  content: string;
  /**
   *
   * @type {CreateSmsCampaignRecipients}
   * @memberof CreateSmsCampaign
   */
  recipients?: CreateSmsCampaignRecipients;
  /**
   * UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
   * @type {Date}
   * @memberof CreateSmsCampaign
   */
  scheduledAt?: Date;
}

/**
 * Check if a given object implements the CreateSmsCampaign interface.
 */
export function instanceOfCreateSmsCampaign(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'sender' in value;
  isInstance = isInstance && 'content' in value;

  return isInstance;
}

export function CreateSmsCampaignFromJSON(json: any): CreateSmsCampaign {
  return CreateSmsCampaignFromJSONTyped(json, false);
}

export function CreateSmsCampaignFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSmsCampaign {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    sender: json['sender'],
    content: json['content'],
    recipients: !exists(json, 'recipients') ? undefined : CreateSmsCampaignRecipientsFromJSON(json['recipients']),
    scheduledAt: !exists(json, 'scheduledAt') ? undefined : new Date(json['scheduledAt']),
  };
}

export function CreateSmsCampaignToJSON(value?: CreateSmsCampaign | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    sender: value.sender,
    content: value.content,
    recipients: CreateSmsCampaignRecipientsToJSON(value.recipients),
    scheduledAt: value.scheduledAt === undefined ? undefined : value.scheduledAt.toISOString(),
  };
}
