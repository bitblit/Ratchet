/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime.js';
import type { UpdateEmailCampaignRecipients } from './UpdateEmailCampaignRecipients.js';
import { UpdateEmailCampaignRecipientsFromJSON, UpdateEmailCampaignRecipientsToJSON } from './UpdateEmailCampaignRecipients.js';
import type { UpdateEmailCampaignSender } from './UpdateEmailCampaignSender.js';
import { UpdateEmailCampaignSenderFromJSON, UpdateEmailCampaignSenderToJSON } from './UpdateEmailCampaignSender.js';

/**
 *
 * @export
 * @interface UpdateEmailCampaign
 */
export interface UpdateEmailCampaign {
  /**
   * Tag of the campaign
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  tag?: string;
  /**
   *
   * @type {UpdateEmailCampaignSender}
   * @memberof UpdateEmailCampaign
   */
  sender?: UpdateEmailCampaignSender;
  /**
   * Name of the campaign
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  name?: string;
  /**
   * Body of the message (HTML version). REQUIRED if htmlUrl is empty
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  htmlContent?: string;
  /**
   * Url which contents the body of the email message. REQUIRED if htmlContent is empty
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  htmlUrl?: string;
  /**
   * UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).
   * @type {Date}
   * @memberof UpdateEmailCampaign
   */
  scheduledAt?: Date;
  /**
   * Subject of the campaign
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  subject?: string;
  /**
   * Email on which campaign recipients will be able to reply to
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  replyTo?: string;
  /**
   * To personalize the Â«ToÂ» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  toField?: string;
  /**
   *
   * @type {UpdateEmailCampaignRecipients}
   * @memberof UpdateEmailCampaign
   */
  recipients?: UpdateEmailCampaignRecipients;
  /**
   * Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  attachmentUrl?: string;
  /**
   * Status of inline image. inlineImageActivation = false means image canâ€™t be embedded, & inlineImageActivation = true means image can be embedded, in the email. You cannot send a campaign of more than 4MB with images embedded in the email. Campaigns with the images embedded in the email must be sent to less than 5000 contacts.
   * @type {boolean}
   * @memberof UpdateEmailCampaign
   */
  inlineImageActivation?: boolean;
  /**
   * Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
   * @type {boolean}
   * @memberof UpdateEmailCampaign
   */
  mirrorActive?: boolean;
  /**
   * FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
   * @type {boolean}
   * @memberof UpdateEmailCampaign
   */
  recurring?: boolean;
  /**
   * Footer of the email campaign
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  footer?: string;
  /**
   * Header of the email campaign
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  header?: string;
  /**
   * Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  utmCampaign?: string;
  /**
   * Pass the set of attributes to customize the type 'classic' campaign. For example, {"FNAME":"Joe", "LNAME":"Doe"}. The 'params' field will get updated, only if the campaign is in New Template Language, else ignored. The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl', 'sender.name' & 'toField'
   * @type {object}
   * @memberof UpdateEmailCampaign
   */
  params?: object;
  /**
   * Set this to true if you want to send your campaign at best time. Note:- if true, warmup ip will be disabled.
   * @type {boolean}
   * @memberof UpdateEmailCampaign
   */
  sendAtBestTime?: boolean;
  /**
   * Status of A/B Test. abTesting = false means it is disabled, & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule', 'winnerCriteria' & 'winnerDelay' will be considered if abTesting is set to true. 'subject' if passed is ignored.  Can be set to true only if 'sendAtBestTime' is 'false'. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
   * @type {boolean}
   * @memberof UpdateEmailCampaign
   */
  abTesting?: boolean;
  /**
   * Subject A of the campaign. Considered if abTesting = true. subjectA & subjectB should have unique value
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  subjectA?: string;
  /**
   * Subject B of the campaign. Considered if abTesting = true. subjectA & subjectB should have unique value
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  subjectB?: string;
  /**
   * Add the size of your test groups. Considered if abTesting = true. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else
   * @type {number}
   * @memberof UpdateEmailCampaign
   */
  splitRule?: number;
  /**
   * Choose the metrics that will determinate the winning version. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria' is ignored if passed or alreday exist in record
   * @type {string}
   * @memberof UpdateEmailCampaign
   */
  winnerCriteria?: UpdateEmailCampaignWinnerCriteriaEnum;
  /**
   * Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerDelay' is ignored if passed or alreday exist in record
   * @type {number}
   * @memberof UpdateEmailCampaign
   */
  winnerDelay?: number;
  /**
   * Available for dedicated ip clients. Set this to true if you wish to warm up your ip.
   * @type {boolean}
   * @memberof UpdateEmailCampaign
   */
  ipWarmupEnable?: boolean;
  /**
   * Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
   * @type {number}
   * @memberof UpdateEmailCampaign
   */
  initialQuota?: number;
  /**
   * Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
   * @type {number}
   * @memberof UpdateEmailCampaign
   */
  increaseRate?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum UpdateEmailCampaignWinnerCriteriaEnum {
  Open = 'open',
  Click = 'click',
}

/**
 * Check if a given object implements the UpdateEmailCampaign interface.
 */
export function instanceOfUpdateEmailCampaign(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function UpdateEmailCampaignFromJSON(json: any): UpdateEmailCampaign {
  return UpdateEmailCampaignFromJSONTyped(json, false);
}

export function UpdateEmailCampaignFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateEmailCampaign {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    tag: !exists(json, 'tag') ? undefined : json['tag'],
    sender: !exists(json, 'sender') ? undefined : UpdateEmailCampaignSenderFromJSON(json['sender']),
    name: !exists(json, 'name') ? undefined : json['name'],
    htmlContent: !exists(json, 'htmlContent') ? undefined : json['htmlContent'],
    htmlUrl: !exists(json, 'htmlUrl') ? undefined : json['htmlUrl'],
    scheduledAt: !exists(json, 'scheduledAt') ? undefined : new Date(json['scheduledAt']),
    subject: !exists(json, 'subject') ? undefined : json['subject'],
    replyTo: !exists(json, 'replyTo') ? undefined : json['replyTo'],
    toField: !exists(json, 'toField') ? undefined : json['toField'],
    recipients: !exists(json, 'recipients') ? undefined : UpdateEmailCampaignRecipientsFromJSON(json['recipients']),
    attachmentUrl: !exists(json, 'attachmentUrl') ? undefined : json['attachmentUrl'],
    inlineImageActivation: !exists(json, 'inlineImageActivation') ? undefined : json['inlineImageActivation'],
    mirrorActive: !exists(json, 'mirrorActive') ? undefined : json['mirrorActive'],
    recurring: !exists(json, 'recurring') ? undefined : json['recurring'],
    footer: !exists(json, 'footer') ? undefined : json['footer'],
    header: !exists(json, 'header') ? undefined : json['header'],
    utmCampaign: !exists(json, 'utmCampaign') ? undefined : json['utmCampaign'],
    params: !exists(json, 'params') ? undefined : json['params'],
    sendAtBestTime: !exists(json, 'sendAtBestTime') ? undefined : json['sendAtBestTime'],
    abTesting: !exists(json, 'abTesting') ? undefined : json['abTesting'],
    subjectA: !exists(json, 'subjectA') ? undefined : json['subjectA'],
    subjectB: !exists(json, 'subjectB') ? undefined : json['subjectB'],
    splitRule: !exists(json, 'splitRule') ? undefined : json['splitRule'],
    winnerCriteria: !exists(json, 'winnerCriteria') ? undefined : json['winnerCriteria'],
    winnerDelay: !exists(json, 'winnerDelay') ? undefined : json['winnerDelay'],
    ipWarmupEnable: !exists(json, 'ipWarmupEnable') ? undefined : json['ipWarmupEnable'],
    initialQuota: !exists(json, 'initialQuota') ? undefined : json['initialQuota'],
    increaseRate: !exists(json, 'increaseRate') ? undefined : json['increaseRate'],
  };
}

export function UpdateEmailCampaignToJSON(value?: UpdateEmailCampaign | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    tag: value.tag,
    sender: UpdateEmailCampaignSenderToJSON(value.sender),
    name: value.name,
    htmlContent: value.htmlContent,
    htmlUrl: value.htmlUrl,
    scheduledAt: value.scheduledAt === undefined ? undefined : value.scheduledAt.toISOString(),
    subject: value.subject,
    replyTo: value.replyTo,
    toField: value.toField,
    recipients: UpdateEmailCampaignRecipientsToJSON(value.recipients),
    attachmentUrl: value.attachmentUrl,
    inlineImageActivation: value.inlineImageActivation,
    mirrorActive: value.mirrorActive,
    recurring: value.recurring,
    footer: value.footer,
    header: value.header,
    utmCampaign: value.utmCampaign,
    params: value.params,
    sendAtBestTime: value.sendAtBestTime,
    abTesting: value.abTesting,
    subjectA: value.subjectA,
    subjectB: value.subjectB,
    splitRule: value.splitRule,
    winnerCriteria: value.winnerCriteria,
    winnerDelay: value.winnerDelay,
    ipWarmupEnable: value.ipWarmupEnable,
    initialQuota: value.initialQuota,
    increaseRate: value.increaseRate,
  };
}
