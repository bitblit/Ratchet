/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime.js';
import type { SendEmailAttachmentInner } from './SendEmailAttachmentInner.js';
import { SendEmailAttachmentInnerFromJSON, SendEmailAttachmentInnerToJSON } from './SendEmailAttachmentInner.js';

/**
 *
 * @export
 * @interface SendEmail
 */
export interface SendEmail {
  /**
   * List of the email addresses of the recipients. For example, ['abc@example.com', 'asd@example.com'].
   * @type {Array<string>}
   * @memberof SendEmail
   */
  emailTo: Array<string>;
  /**
   * List of the email addresses of the recipients in bcc
   * @type {Array<string>}
   * @memberof SendEmail
   */
  emailBcc?: Array<string>;
  /**
   * List of the email addresses of the recipients in cc
   * @type {Array<string>}
   * @memberof SendEmail
   */
  emailCc?: Array<string>;
  /**
   * Email address which shall be used by campaign recipients to reply back
   * @type {string}
   * @memberof SendEmail
   */
  replyTo?: string;
  /**
   * Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
   * @type {string}
   * @memberof SendEmail
   */
  attachmentUrl?: string;
  /**
   * Pass the list of content (base64 encoded) and name of the attachment. For example, [{"content":"base64 encoded content 1", "name":"attcahment1"}, {"content":"base64 encoded content 2", "name":"attcahment2"}].
   * @type {Array<SendEmailAttachmentInner>}
   * @memberof SendEmail
   */
  attachment?: Array<SendEmailAttachmentInner>;
  /**
   * Pass the set of headers that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, {"Content-Type":"text/html", "charset":"iso-8859-1", "sender.ip":"1.2.3.4"}
   * @type {object}
   * @memberof SendEmail
   */
  headers?: object;
  /**
   * Pass the set of attributes to customize the template. For example, {"FNAME":"Joe", "LNAME":"Doe"}
   * @type {object}
   * @memberof SendEmail
   */
  attributes?: object;
  /**
   * Tag your emails to find them more easily
   * @type {Array<string>}
   * @memberof SendEmail
   */
  tags?: Array<string>;
}

/**
 * Check if a given object implements the SendEmail interface.
 */
export function instanceOfSendEmail(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'emailTo' in value;

  return isInstance;
}

export function SendEmailFromJSON(json: any): SendEmail {
  return SendEmailFromJSONTyped(json, false);
}

export function SendEmailFromJSONTyped(json: any, ignoreDiscriminator: boolean): SendEmail {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    emailTo: json['emailTo'],
    emailBcc: !exists(json, 'emailBcc') ? undefined : json['emailBcc'],
    emailCc: !exists(json, 'emailCc') ? undefined : json['emailCc'],
    replyTo: !exists(json, 'replyTo') ? undefined : json['replyTo'],
    attachmentUrl: !exists(json, 'attachmentUrl') ? undefined : json['attachmentUrl'],
    attachment: !exists(json, 'attachment') ? undefined : (json['attachment'] as Array<any>).map(SendEmailAttachmentInnerFromJSON),
    headers: !exists(json, 'headers') ? undefined : json['headers'],
    attributes: !exists(json, 'attributes') ? undefined : json['attributes'],
    tags: !exists(json, 'tags') ? undefined : json['tags'],
  };
}

export function SendEmailToJSON(value?: SendEmail | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    emailTo: value.emailTo,
    emailBcc: value.emailBcc,
    emailCc: value.emailCc,
    replyTo: value.replyTo,
    attachmentUrl: value.attachmentUrl,
    attachment: value.attachment === undefined ? undefined : (value.attachment as Array<any>).map(SendEmailAttachmentInnerToJSON),
    headers: value.headers,
    attributes: value.attributes,
    tags: value.tags,
  };
}
