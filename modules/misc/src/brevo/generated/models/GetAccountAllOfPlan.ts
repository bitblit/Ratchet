/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
/**
 *
 * @export
 * @interface GetAccountAllOfPlan
 */
export interface GetAccountAllOfPlan {
  /**
   * Displays the plan type of the user
   * @type {string}
   * @memberof GetAccountAllOfPlan
   */
  type: GetAccountAllOfPlanTypeEnum;
  /**
   * This is the type of the credit, "Send Limit" is one of the possible types of credit of a user. "Send Limit" implies the total number of emails you can send to the subscribers in your account.
   * @type {string}
   * @memberof GetAccountAllOfPlan
   */
  creditsType: GetAccountAllOfPlanCreditsTypeEnum;
  /**
   * Remaining credits of the user
   * @type {number}
   * @memberof GetAccountAllOfPlan
   */
  credits: number;
  /**
   * Date of the period from which the plan will start (only available for "subscription" and "reseller" plan type)
   * @type {Date}
   * @memberof GetAccountAllOfPlan
   */
  startDate?: Date;
  /**
   * Date of the period from which the plan will end (only available for "subscription" and "reseller" plan type)
   * @type {Date}
   * @memberof GetAccountAllOfPlan
   */
  endDate?: Date;
  /**
   * Only in case of reseller account. It implies the total number of child accounts you can add to your account.
   * @type {number}
   * @memberof GetAccountAllOfPlan
   */
  userLimit?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum GetAccountAllOfPlanTypeEnum {
  PayAsYouGo = 'payAsYouGo',
  Free = 'free',
  Subscription = 'subscription',
  Sms = 'sms',
  Reseller = 'reseller',
}
/**
 * @export
 * @enum {string}
 */
export enum GetAccountAllOfPlanCreditsTypeEnum {
  SendLimit = 'sendLimit',
}

/**
 * Check if a given object implements the GetAccountAllOfPlan interface.
 */
export function instanceOfGetAccountAllOfPlan(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'type' in value;
  isInstance = isInstance && 'creditsType' in value;
  isInstance = isInstance && 'credits' in value;

  return isInstance;
}

export function GetAccountAllOfPlanFromJSON(json: any): GetAccountAllOfPlan {
  return GetAccountAllOfPlanFromJSONTyped(json, false);
}

export function GetAccountAllOfPlanFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetAccountAllOfPlan {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: json['type'],
    creditsType: json['creditsType'],
    credits: json['credits'],
    startDate: !exists(json, 'startDate') ? undefined : new Date(json['startDate']),
    endDate: !exists(json, 'endDate') ? undefined : new Date(json['endDate']),
    userLimit: !exists(json, 'userLimit') ? undefined : json['userLimit'],
  };
}

export function GetAccountAllOfPlanToJSON(value?: GetAccountAllOfPlan | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    creditsType: value.creditsType,
    credits: value.credits,
    startDate: value.startDate === undefined ? undefined : value.startDate.toISOString().substring(0, 10),
    endDate: value.endDate === undefined ? undefined : value.endDate.toISOString().substring(0, 10),
    userLimit: value.userLimit,
  };
}
