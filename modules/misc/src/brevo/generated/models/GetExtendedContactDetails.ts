/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime.js';
import type { GetExtendedContactDetailsAllOfStatistics } from './GetExtendedContactDetailsAllOfStatistics.js';
import {
  GetExtendedContactDetailsAllOfStatisticsFromJSON,
  GetExtendedContactDetailsAllOfStatisticsToJSON,
} from './GetExtendedContactDetailsAllOfStatistics.js';

/**
 *
 * @export
 * @interface GetExtendedContactDetails
 */
export interface GetExtendedContactDetails {
  /**
   * Email address of the contact for which you requested the details
   * @type {string}
   * @memberof GetExtendedContactDetails
   */
  email?: string;
  /**
   * ID of the contact for which you requested the details
   * @type {number}
   * @memberof GetExtendedContactDetails
   */
  id: number;
  /**
   * Blacklist status for email campaigns (true=blacklisted, false=not blacklisted)
   * @type {boolean}
   * @memberof GetExtendedContactDetails
   */
  emailBlacklisted: boolean;
  /**
   * Blacklist status for SMS campaigns (true=blacklisted, false=not blacklisted)
   * @type {boolean}
   * @memberof GetExtendedContactDetails
   */
  smsBlacklisted: boolean;
  /**
   * Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
   * @type {Date}
   * @memberof GetExtendedContactDetails
   */
  createdAt: Date;
  /**
   * Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
   * @type {Date}
   * @memberof GetExtendedContactDetails
   */
  modifiedAt: Date;
  /**
   *
   * @type {Array<number>}
   * @memberof GetExtendedContactDetails
   */
  listIds: Array<number>;
  /**
   *
   * @type {Array<number>}
   * @memberof GetExtendedContactDetails
   */
  listUnsubscribed?: Array<number>;
  /**
   * Set of attributes of the contact
   * @type {object}
   * @memberof GetExtendedContactDetails
   */
  attributes: object;
  /**
   *
   * @type {GetExtendedContactDetailsAllOfStatistics}
   * @memberof GetExtendedContactDetails
   */
  statistics: GetExtendedContactDetailsAllOfStatistics;
}

/**
 * Check if a given object implements the GetExtendedContactDetails interface.
 */
export function instanceOfGetExtendedContactDetails(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'emailBlacklisted' in value;
  isInstance = isInstance && 'smsBlacklisted' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'modifiedAt' in value;
  isInstance = isInstance && 'listIds' in value;
  isInstance = isInstance && 'attributes' in value;
  isInstance = isInstance && 'statistics' in value;

  return isInstance;
}

export function GetExtendedContactDetailsFromJSON(json: any): GetExtendedContactDetails {
  return GetExtendedContactDetailsFromJSONTyped(json, false);
}

export function GetExtendedContactDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetExtendedContactDetails {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    email: !exists(json, 'email') ? undefined : json['email'],
    id: json['id'],
    emailBlacklisted: json['emailBlacklisted'],
    smsBlacklisted: json['smsBlacklisted'],
    createdAt: new Date(json['createdAt']),
    modifiedAt: new Date(json['modifiedAt']),
    listIds: json['listIds'],
    listUnsubscribed: !exists(json, 'listUnsubscribed') ? undefined : json['listUnsubscribed'],
    attributes: json['attributes'],
    statistics: GetExtendedContactDetailsAllOfStatisticsFromJSON(json['statistics']),
  };
}

export function GetExtendedContactDetailsToJSON(value?: GetExtendedContactDetails | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    email: value.email,
    id: value.id,
    emailBlacklisted: value.emailBlacklisted,
    smsBlacklisted: value.smsBlacklisted,
    createdAt: value.createdAt.toISOString(),
    modifiedAt: value.modifiedAt.toISOString(),
    listIds: value.listIds,
    listUnsubscribed: value.listUnsubscribed,
    attributes: value.attributes,
    statistics: GetExtendedContactDetailsAllOfStatisticsToJSON(value.statistics),
  };
}
