/* tslint:disable */
/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
/**
 * Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported.
 * @export
 * @interface RequestContactExportCustomContactFilter
 */
export interface RequestContactExportCustomContactFilter {
    /**
     * Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed & unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only.
     * 
     * @type {string}
     * @memberof RequestContactExportCustomContactFilter
     */
    actionForContacts?: RequestContactExportCustomContactFilterActionForContactsEnum;
    /**
     * Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers & nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers & nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces & softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).
     * 
     * @type {string}
     * @memberof RequestContactExportCustomContactFilter
     */
    actionForEmailCampaigns?: RequestContactExportCustomContactFilterActionForEmailCampaignsEnum;
    /**
     * Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces & softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.
     * 
     * @type {string}
     * @memberof RequestContactExportCustomContactFilter
     */
    actionForSmsCampaigns?: RequestContactExportCustomContactFilterActionForSmsCampaignsEnum;
    /**
     * Mandatory if actionForContacts is passed, ignored otherwise. Id of the list for which the corresponding action shall be applied in the filter.
     * @type {number}
     * @memberof RequestContactExportCustomContactFilter
     */
    listId?: number;
    /**
     * Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter.
     * @type {number}
     * @memberof RequestContactExportCustomContactFilter
     */
    emailCampaignId?: number;
    /**
     * Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.
     * @type {number}
     * @memberof RequestContactExportCustomContactFilter
     */
    smsCampaignId?: number;
}

/**
* @export
* @enum {string}
*/
export enum RequestContactExportCustomContactFilterActionForContactsEnum {
    AllContacts = 'allContacts',
    Subscribed = 'subscribed',
    Unsubscribed = 'unsubscribed',
    UnsubscribedPerList = 'unsubscribedPerList'
}
/**
* @export
* @enum {string}
*/
export enum RequestContactExportCustomContactFilterActionForEmailCampaignsEnum {
    Openers = 'openers',
    NonOpeners = 'nonOpeners',
    Clickers = 'clickers',
    NonClickers = 'nonClickers',
    Unsubscribed = 'unsubscribed',
    HardBounces = 'hardBounces',
    SoftBounces = 'softBounces'
}
/**
* @export
* @enum {string}
*/
export enum RequestContactExportCustomContactFilterActionForSmsCampaignsEnum {
    HardBounces = 'hardBounces',
    SoftBounces = 'softBounces',
    Unsubscribed = 'unsubscribed'
}


/**
 * Check if a given object implements the RequestContactExportCustomContactFilter interface.
 */
export function instanceOfRequestContactExportCustomContactFilter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RequestContactExportCustomContactFilterFromJSON(json: any): RequestContactExportCustomContactFilter {
    return RequestContactExportCustomContactFilterFromJSONTyped(json, false);
}

export function RequestContactExportCustomContactFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestContactExportCustomContactFilter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actionForContacts': !exists(json, 'actionForContacts') ? undefined : json['actionForContacts'],
        'actionForEmailCampaigns': !exists(json, 'actionForEmailCampaigns') ? undefined : json['actionForEmailCampaigns'],
        'actionForSmsCampaigns': !exists(json, 'actionForSmsCampaigns') ? undefined : json['actionForSmsCampaigns'],
        'listId': !exists(json, 'listId') ? undefined : json['listId'],
        'emailCampaignId': !exists(json, 'emailCampaignId') ? undefined : json['emailCampaignId'],
        'smsCampaignId': !exists(json, 'smsCampaignId') ? undefined : json['smsCampaignId'],
    };
}

export function RequestContactExportCustomContactFilterToJSON(value?: RequestContactExportCustomContactFilter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actionForContacts': value.actionForContacts,
        'actionForEmailCampaigns': value.actionForEmailCampaigns,
        'actionForSmsCampaigns': value.actionForSmsCampaigns,
        'listId': value.listId,
        'emailCampaignId': value.emailCampaignId,
        'smsCampaignId': value.smsCampaignId,
    };
}

