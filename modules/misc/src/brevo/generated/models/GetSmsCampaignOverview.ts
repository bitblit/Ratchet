/* eslint-disable */
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
/**
 *
 * @export
 * @interface GetSmsCampaignOverview
 */
export interface GetSmsCampaignOverview {
  /**
   * ID of the SMS Campaign
   * @type {number}
   * @memberof GetSmsCampaignOverview
   */
  id: number;
  /**
   * Name of the SMS Campaign
   * @type {string}
   * @memberof GetSmsCampaignOverview
   */
  name: string;
  /**
   * Status of the SMS Campaign
   * @type {string}
   * @memberof GetSmsCampaignOverview
   */
  status: GetSmsCampaignOverviewStatusEnum;
  /**
   * Content of the SMS Campaign
   * @type {string}
   * @memberof GetSmsCampaignOverview
   */
  content: string;
  /**
   * UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
   * @type {Date}
   * @memberof GetSmsCampaignOverview
   */
  scheduledAt: Date;
  /**
   * Sender of the SMS Campaign
   * @type {string}
   * @memberof GetSmsCampaignOverview
   */
  sender: string;
  /**
   * Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
   * @type {Date}
   * @memberof GetSmsCampaignOverview
   */
  createdAt: Date;
  /**
   * UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
   * @type {Date}
   * @memberof GetSmsCampaignOverview
   */
  modifiedAt: Date;
}

/**
 * @export
 * @enum {string}
 */
export enum GetSmsCampaignOverviewStatusEnum {
  Draft = 'draft',
  Sent = 'sent',
  Archive = 'archive',
  Queued = 'queued',
  Suspended = 'suspended',
  InProcess = 'inProcess',
}

/**
 * Check if a given object implements the GetSmsCampaignOverview interface.
 */
export function instanceOfGetSmsCampaignOverview(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'status' in value;
  isInstance = isInstance && 'content' in value;
  isInstance = isInstance && 'scheduledAt' in value;
  isInstance = isInstance && 'sender' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'modifiedAt' in value;

  return isInstance;
}

export function GetSmsCampaignOverviewFromJSON(json: any): GetSmsCampaignOverview {
  return GetSmsCampaignOverviewFromJSONTyped(json, false);
}

export function GetSmsCampaignOverviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetSmsCampaignOverview {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name'],
    status: json['status'],
    content: json['content'],
    scheduledAt: new Date(json['scheduledAt']),
    sender: json['sender'],
    createdAt: new Date(json['createdAt']),
    modifiedAt: new Date(json['modifiedAt']),
  };
}

export function GetSmsCampaignOverviewToJSON(value?: GetSmsCampaignOverview | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    status: value.status,
    content: value.content,
    scheduledAt: value.scheduledAt.toISOString(),
    sender: value.sender,
    createdAt: value.createdAt.toISOString(),
    modifiedAt: value.modifiedAt.toISOString(),
  };
}
